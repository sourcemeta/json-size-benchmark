#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class Environment(object):
    """
    Attributes:
     - buildSuiteDir

    """


    def __init__(self, buildSuiteDir=None,):
        self.buildSuiteDir = buildSuiteDir

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.buildSuiteDir = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Environment')
        if self.buildSuiteDir is not None:
            oprot.writeFieldBegin('buildSuiteDir', TType.STRING, 1)
            oprot.writeString(self.buildSuiteDir.encode('utf-8') if sys.version_info[0] == 2 else self.buildSuiteDir)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.buildSuiteDir is None:
            raise TProtocolException(message='Required field buildSuiteDir is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class With(object):
    """
    Attributes:
     - nodeVersion

    """


    def __init__(self, nodeVersion=None,):
        self.nodeVersion = nodeVersion

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.nodeVersion = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('With')
        if self.nodeVersion is not None:
            oprot.writeFieldBegin('nodeVersion', TType.STRING, 1)
            oprot.writeString(self.nodeVersion.encode('utf-8') if sys.version_info[0] == 2 else self.nodeVersion)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.nodeVersion is None:
            raise TProtocolException(message='Required field nodeVersion is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Step(object):
    """
    Attributes:
     - uses
     - run
     - workingDirectory
     - with1
     - name

    """


    def __init__(self, uses=None, run=None, workingDirectory=None, with1=None, name=None,):
        self.uses = uses
        self.run = run
        self.workingDirectory = workingDirectory
        self.with1 = with1
        self.name = name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.uses = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.run = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.workingDirectory = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.with1 = With()
                    self.with1.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Step')
        if self.uses is not None:
            oprot.writeFieldBegin('uses', TType.STRING, 1)
            oprot.writeString(self.uses.encode('utf-8') if sys.version_info[0] == 2 else self.uses)
            oprot.writeFieldEnd()
        if self.run is not None:
            oprot.writeFieldBegin('run', TType.STRING, 2)
            oprot.writeString(self.run.encode('utf-8') if sys.version_info[0] == 2 else self.run)
            oprot.writeFieldEnd()
        if self.workingDirectory is not None:
            oprot.writeFieldBegin('workingDirectory', TType.STRING, 3)
            oprot.writeString(self.workingDirectory.encode('utf-8') if sys.version_info[0] == 2 else self.workingDirectory)
            oprot.writeFieldEnd()
        if self.with1 is not None:
            oprot.writeFieldBegin('with1', TType.STRUCT, 4)
            self.with1.write(oprot)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 5)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Build(object):
    """
    Attributes:
     - runsOn
     - env
     - steps

    """


    def __init__(self, runsOn=None, env=None, steps=None,):
        self.runsOn = runsOn
        self.env = env
        self.steps = steps

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.runsOn = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.env = Environment()
                    self.env.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.steps = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = Step()
                        _elem5.read(iprot)
                        self.steps.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Build')
        if self.runsOn is not None:
            oprot.writeFieldBegin('runsOn', TType.STRING, 1)
            oprot.writeString(self.runsOn.encode('utf-8') if sys.version_info[0] == 2 else self.runsOn)
            oprot.writeFieldEnd()
        if self.env is not None:
            oprot.writeFieldBegin('env', TType.STRUCT, 2)
            self.env.write(oprot)
            oprot.writeFieldEnd()
        if self.steps is not None:
            oprot.writeFieldBegin('steps', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.steps))
            for iter6 in self.steps:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.runsOn is None:
            raise TProtocolException(message='Required field runsOn is unset!')
        if self.env is None:
            raise TProtocolException(message='Required field env is unset!')
        if self.steps is None:
            raise TProtocolException(message='Required field steps is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Jobs(object):
    """
    Attributes:
     - build

    """


    def __init__(self, build=None,):
        self.build = build

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.build = Build()
                    self.build.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Jobs')
        if self.build is not None:
            oprot.writeFieldBegin('build', TType.STRUCT, 1)
            self.build.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.build is None:
            raise TProtocolException(message='Required field build is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Main(object):
    """
    Attributes:
     - name
     - on
     - jobs

    """


    def __init__(self, name=None, on=None, jobs=None,):
        self.name = name
        self.on = on
        self.jobs = jobs

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.on = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.on.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.jobs = Jobs()
                    self.jobs.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Main')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.on is not None:
            oprot.writeFieldBegin('on', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.on))
            for iter13 in self.on:
                oprot.writeString(iter13.encode('utf-8') if sys.version_info[0] == 2 else iter13)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.jobs is not None:
            oprot.writeFieldBegin('jobs', TType.STRUCT, 3)
            self.jobs.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.name is None:
            raise TProtocolException(message='Required field name is unset!')
        if self.on is None:
            raise TProtocolException(message='Required field on is unset!')
        if self.jobs is None:
            raise TProtocolException(message='Required field jobs is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(Environment)
Environment.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'buildSuiteDir', 'UTF8', None, ),  # 1
)
all_structs.append(With)
With.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'nodeVersion', 'UTF8', None, ),  # 1
)
all_structs.append(Step)
Step.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'uses', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'run', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'workingDirectory', 'UTF8', None, ),  # 3
    (4, TType.STRUCT, 'with1', [With, None], None, ),  # 4
    (5, TType.STRING, 'name', 'UTF8', None, ),  # 5
)
all_structs.append(Build)
Build.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'runsOn', 'UTF8', None, ),  # 1
    (2, TType.STRUCT, 'env', [Environment, None], None, ),  # 2
    (3, TType.LIST, 'steps', (TType.STRUCT, [Step, None], False), None, ),  # 3
)
all_structs.append(Jobs)
Jobs.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'build', [Build, None], None, ),  # 1
)
all_structs.append(Main)
Main.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'on', (TType.STRING, 'UTF8', False), None, ),  # 2
    (3, TType.STRUCT, 'jobs', [Jobs, None], None, ),  # 3
)
fix_spec(all_structs)
del all_structs
