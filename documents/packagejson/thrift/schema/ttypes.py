#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class Author(object):
    """
    Attributes:
     - name
     - url

    """


    def __init__(self, name=None, url=None,):
        self.name = name
        self.url = url

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.url = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Author')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.url is not None:
            oprot.writeFieldBegin('url', TType.STRING, 2)
            oprot.writeString(self.url.encode('utf-8') if sys.version_info[0] == 2 else self.url)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.name is None:
            raise TProtocolException(message='Required field name is unset!')
        if self.url is None:
            raise TProtocolException(message='Required field url is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Repository(object):
    """
    Attributes:
     - type
     - url

    """


    def __init__(self, type=None, url=None,):
        self.type = type
        self.url = url

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.type = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.url = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Repository')
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.STRING, 1)
            oprot.writeString(self.type.encode('utf-8') if sys.version_info[0] == 2 else self.type)
            oprot.writeFieldEnd()
        if self.url is not None:
            oprot.writeFieldBegin('url', TType.STRING, 2)
            oprot.writeString(self.url.encode('utf-8') if sys.version_info[0] == 2 else self.url)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.type is None:
            raise TProtocolException(message='Required field type is unset!')
        if self.url is None:
            raise TProtocolException(message='Required field url is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Bugs(object):
    """
    Attributes:
     - url

    """


    def __init__(self, url=None,):
        self.url = url

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.url = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Bugs')
        if self.url is not None:
            oprot.writeFieldBegin('url', TType.STRING, 1)
            oprot.writeString(self.url.encode('utf-8') if sys.version_info[0] == 2 else self.url)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.url is None:
            raise TProtocolException(message='Required field url is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class License(object):
    """
    Attributes:
     - type
     - url

    """


    def __init__(self, type=None, url=None,):
        self.type = type
        self.url = url

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.type = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.url = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('License')
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.STRING, 1)
            oprot.writeString(self.type.encode('utf-8') if sys.version_info[0] == 2 else self.type)
            oprot.writeFieldEnd()
        if self.url is not None:
            oprot.writeFieldBegin('url', TType.STRING, 2)
            oprot.writeString(self.url.encode('utf-8') if sys.version_info[0] == 2 else self.url)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.type is None:
            raise TProtocolException(message='Required field type is unset!')
        if self.url is None:
            raise TProtocolException(message='Required field url is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Scripts(object):
    """
    Attributes:
     - test

    """


    def __init__(self, test=None,):
        self.test = test

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.test = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Scripts')
        if self.test is not None:
            oprot.writeFieldBegin('test', TType.STRING, 1)
            oprot.writeString(self.test.encode('utf-8') if sys.version_info[0] == 2 else self.test)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.test is None:
            raise TProtocolException(message='Required field test is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Engines(object):
    """
    Attributes:
     - node

    """


    def __init__(self, node=None,):
        self.node = node

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.node = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Engines')
        if self.node is not None:
            oprot.writeFieldBegin('node', TType.STRING, 1)
            oprot.writeString(self.node.encode('utf-8') if sys.version_info[0] == 2 else self.node)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.node is None:
            raise TProtocolException(message='Required field node is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Dependencies(object):
    """
    Attributes:
     - async1
     - coffeeScript
     - colors
     - dateformat
     - eventemitter2
     - findupSync
     - glob
     - hooker
     - iconvLite
     - minimatch
     - nopt
     - rimraf
     - lodash
     - underscoreString
     - which
     - jsYaml
     - exit
     - getobject
     - gruntLegacyUtil
     - gruntLegacyLog

    """


    def __init__(self, async1=None, coffeeScript=None, colors=None, dateformat=None, eventemitter2=None, findupSync=None, glob=None, hooker=None, iconvLite=None, minimatch=None, nopt=None, rimraf=None, lodash=None, underscoreString=None, which=None, jsYaml=None, exit=None, getobject=None, gruntLegacyUtil=None, gruntLegacyLog=None,):
        self.async1 = async1
        self.coffeeScript = coffeeScript
        self.colors = colors
        self.dateformat = dateformat
        self.eventemitter2 = eventemitter2
        self.findupSync = findupSync
        self.glob = glob
        self.hooker = hooker
        self.iconvLite = iconvLite
        self.minimatch = minimatch
        self.nopt = nopt
        self.rimraf = rimraf
        self.lodash = lodash
        self.underscoreString = underscoreString
        self.which = which
        self.jsYaml = jsYaml
        self.exit = exit
        self.getobject = getobject
        self.gruntLegacyUtil = gruntLegacyUtil
        self.gruntLegacyLog = gruntLegacyLog

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.async1 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.coffeeScript = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.colors = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.dateformat = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.eventemitter2 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.findupSync = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.glob = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.hooker = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.iconvLite = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.minimatch = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.nopt = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.rimraf = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.lodash = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.underscoreString = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRING:
                    self.which = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.STRING:
                    self.jsYaml = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.STRING:
                    self.exit = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.STRING:
                    self.getobject = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.STRING:
                    self.gruntLegacyUtil = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.STRING:
                    self.gruntLegacyLog = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Dependencies')
        if self.async1 is not None:
            oprot.writeFieldBegin('async1', TType.STRING, 1)
            oprot.writeString(self.async1.encode('utf-8') if sys.version_info[0] == 2 else self.async1)
            oprot.writeFieldEnd()
        if self.coffeeScript is not None:
            oprot.writeFieldBegin('coffeeScript', TType.STRING, 2)
            oprot.writeString(self.coffeeScript.encode('utf-8') if sys.version_info[0] == 2 else self.coffeeScript)
            oprot.writeFieldEnd()
        if self.colors is not None:
            oprot.writeFieldBegin('colors', TType.STRING, 3)
            oprot.writeString(self.colors.encode('utf-8') if sys.version_info[0] == 2 else self.colors)
            oprot.writeFieldEnd()
        if self.dateformat is not None:
            oprot.writeFieldBegin('dateformat', TType.STRING, 4)
            oprot.writeString(self.dateformat.encode('utf-8') if sys.version_info[0] == 2 else self.dateformat)
            oprot.writeFieldEnd()
        if self.eventemitter2 is not None:
            oprot.writeFieldBegin('eventemitter2', TType.STRING, 5)
            oprot.writeString(self.eventemitter2.encode('utf-8') if sys.version_info[0] == 2 else self.eventemitter2)
            oprot.writeFieldEnd()
        if self.findupSync is not None:
            oprot.writeFieldBegin('findupSync', TType.STRING, 6)
            oprot.writeString(self.findupSync.encode('utf-8') if sys.version_info[0] == 2 else self.findupSync)
            oprot.writeFieldEnd()
        if self.glob is not None:
            oprot.writeFieldBegin('glob', TType.STRING, 7)
            oprot.writeString(self.glob.encode('utf-8') if sys.version_info[0] == 2 else self.glob)
            oprot.writeFieldEnd()
        if self.hooker is not None:
            oprot.writeFieldBegin('hooker', TType.STRING, 8)
            oprot.writeString(self.hooker.encode('utf-8') if sys.version_info[0] == 2 else self.hooker)
            oprot.writeFieldEnd()
        if self.iconvLite is not None:
            oprot.writeFieldBegin('iconvLite', TType.STRING, 9)
            oprot.writeString(self.iconvLite.encode('utf-8') if sys.version_info[0] == 2 else self.iconvLite)
            oprot.writeFieldEnd()
        if self.minimatch is not None:
            oprot.writeFieldBegin('minimatch', TType.STRING, 10)
            oprot.writeString(self.minimatch.encode('utf-8') if sys.version_info[0] == 2 else self.minimatch)
            oprot.writeFieldEnd()
        if self.nopt is not None:
            oprot.writeFieldBegin('nopt', TType.STRING, 11)
            oprot.writeString(self.nopt.encode('utf-8') if sys.version_info[0] == 2 else self.nopt)
            oprot.writeFieldEnd()
        if self.rimraf is not None:
            oprot.writeFieldBegin('rimraf', TType.STRING, 12)
            oprot.writeString(self.rimraf.encode('utf-8') if sys.version_info[0] == 2 else self.rimraf)
            oprot.writeFieldEnd()
        if self.lodash is not None:
            oprot.writeFieldBegin('lodash', TType.STRING, 13)
            oprot.writeString(self.lodash.encode('utf-8') if sys.version_info[0] == 2 else self.lodash)
            oprot.writeFieldEnd()
        if self.underscoreString is not None:
            oprot.writeFieldBegin('underscoreString', TType.STRING, 14)
            oprot.writeString(self.underscoreString.encode('utf-8') if sys.version_info[0] == 2 else self.underscoreString)
            oprot.writeFieldEnd()
        if self.which is not None:
            oprot.writeFieldBegin('which', TType.STRING, 15)
            oprot.writeString(self.which.encode('utf-8') if sys.version_info[0] == 2 else self.which)
            oprot.writeFieldEnd()
        if self.jsYaml is not None:
            oprot.writeFieldBegin('jsYaml', TType.STRING, 16)
            oprot.writeString(self.jsYaml.encode('utf-8') if sys.version_info[0] == 2 else self.jsYaml)
            oprot.writeFieldEnd()
        if self.exit is not None:
            oprot.writeFieldBegin('exit', TType.STRING, 17)
            oprot.writeString(self.exit.encode('utf-8') if sys.version_info[0] == 2 else self.exit)
            oprot.writeFieldEnd()
        if self.getobject is not None:
            oprot.writeFieldBegin('getobject', TType.STRING, 18)
            oprot.writeString(self.getobject.encode('utf-8') if sys.version_info[0] == 2 else self.getobject)
            oprot.writeFieldEnd()
        if self.gruntLegacyUtil is not None:
            oprot.writeFieldBegin('gruntLegacyUtil', TType.STRING, 19)
            oprot.writeString(self.gruntLegacyUtil.encode('utf-8') if sys.version_info[0] == 2 else self.gruntLegacyUtil)
            oprot.writeFieldEnd()
        if self.gruntLegacyLog is not None:
            oprot.writeFieldBegin('gruntLegacyLog', TType.STRING, 20)
            oprot.writeString(self.gruntLegacyLog.encode('utf-8') if sys.version_info[0] == 2 else self.gruntLegacyLog)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.async1 is None:
            raise TProtocolException(message='Required field async1 is unset!')
        if self.coffeeScript is None:
            raise TProtocolException(message='Required field coffeeScript is unset!')
        if self.colors is None:
            raise TProtocolException(message='Required field colors is unset!')
        if self.dateformat is None:
            raise TProtocolException(message='Required field dateformat is unset!')
        if self.eventemitter2 is None:
            raise TProtocolException(message='Required field eventemitter2 is unset!')
        if self.findupSync is None:
            raise TProtocolException(message='Required field findupSync is unset!')
        if self.glob is None:
            raise TProtocolException(message='Required field glob is unset!')
        if self.hooker is None:
            raise TProtocolException(message='Required field hooker is unset!')
        if self.iconvLite is None:
            raise TProtocolException(message='Required field iconvLite is unset!')
        if self.minimatch is None:
            raise TProtocolException(message='Required field minimatch is unset!')
        if self.nopt is None:
            raise TProtocolException(message='Required field nopt is unset!')
        if self.rimraf is None:
            raise TProtocolException(message='Required field rimraf is unset!')
        if self.lodash is None:
            raise TProtocolException(message='Required field lodash is unset!')
        if self.underscoreString is None:
            raise TProtocolException(message='Required field underscoreString is unset!')
        if self.which is None:
            raise TProtocolException(message='Required field which is unset!')
        if self.jsYaml is None:
            raise TProtocolException(message='Required field jsYaml is unset!')
        if self.exit is None:
            raise TProtocolException(message='Required field exit is unset!')
        if self.getobject is None:
            raise TProtocolException(message='Required field getobject is unset!')
        if self.gruntLegacyUtil is None:
            raise TProtocolException(message='Required field gruntLegacyUtil is unset!')
        if self.gruntLegacyLog is None:
            raise TProtocolException(message='Required field gruntLegacyLog is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DevDependencies(object):
    """
    Attributes:
     - temporary
     - gruntContribJshint
     - gruntContribNodeunit
     - gruntContribWatch
     - difflet
     - semver
     - shelljs

    """


    def __init__(self, temporary=None, gruntContribJshint=None, gruntContribNodeunit=None, gruntContribWatch=None, difflet=None, semver=None, shelljs=None,):
        self.temporary = temporary
        self.gruntContribJshint = gruntContribJshint
        self.gruntContribNodeunit = gruntContribNodeunit
        self.gruntContribWatch = gruntContribWatch
        self.difflet = difflet
        self.semver = semver
        self.shelljs = shelljs

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.temporary = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.gruntContribJshint = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.gruntContribNodeunit = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.gruntContribWatch = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.difflet = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.semver = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.shelljs = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DevDependencies')
        if self.temporary is not None:
            oprot.writeFieldBegin('temporary', TType.STRING, 1)
            oprot.writeString(self.temporary.encode('utf-8') if sys.version_info[0] == 2 else self.temporary)
            oprot.writeFieldEnd()
        if self.gruntContribJshint is not None:
            oprot.writeFieldBegin('gruntContribJshint', TType.STRING, 2)
            oprot.writeString(self.gruntContribJshint.encode('utf-8') if sys.version_info[0] == 2 else self.gruntContribJshint)
            oprot.writeFieldEnd()
        if self.gruntContribNodeunit is not None:
            oprot.writeFieldBegin('gruntContribNodeunit', TType.STRING, 3)
            oprot.writeString(self.gruntContribNodeunit.encode('utf-8') if sys.version_info[0] == 2 else self.gruntContribNodeunit)
            oprot.writeFieldEnd()
        if self.gruntContribWatch is not None:
            oprot.writeFieldBegin('gruntContribWatch', TType.STRING, 4)
            oprot.writeString(self.gruntContribWatch.encode('utf-8') if sys.version_info[0] == 2 else self.gruntContribWatch)
            oprot.writeFieldEnd()
        if self.difflet is not None:
            oprot.writeFieldBegin('difflet', TType.STRING, 5)
            oprot.writeString(self.difflet.encode('utf-8') if sys.version_info[0] == 2 else self.difflet)
            oprot.writeFieldEnd()
        if self.semver is not None:
            oprot.writeFieldBegin('semver', TType.STRING, 6)
            oprot.writeString(self.semver.encode('utf-8') if sys.version_info[0] == 2 else self.semver)
            oprot.writeFieldEnd()
        if self.shelljs is not None:
            oprot.writeFieldBegin('shelljs', TType.STRING, 7)
            oprot.writeString(self.shelljs.encode('utf-8') if sys.version_info[0] == 2 else self.shelljs)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.temporary is None:
            raise TProtocolException(message='Required field temporary is unset!')
        if self.gruntContribJshint is None:
            raise TProtocolException(message='Required field gruntContribJshint is unset!')
        if self.gruntContribNodeunit is None:
            raise TProtocolException(message='Required field gruntContribNodeunit is unset!')
        if self.gruntContribWatch is None:
            raise TProtocolException(message='Required field gruntContribWatch is unset!')
        if self.difflet is None:
            raise TProtocolException(message='Required field difflet is unset!')
        if self.semver is None:
            raise TProtocolException(message='Required field semver is unset!')
        if self.shelljs is None:
            raise TProtocolException(message='Required field shelljs is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Main(object):
    """
    Attributes:
     - name
     - description
     - version
     - author
     - homepage
     - repository
     - bugs
     - licenses
     - main
     - scripts
     - engines
     - keywords
     - dependencies
     - devDependencies
     - readme
     - _id
     - _from

    """


    def __init__(self, name=None, description=None, version=None, author=None, homepage=None, repository=None, bugs=None, licenses=None, main=None, scripts=None, engines=None, keywords=None, dependencies=None, devDependencies=None, readme=None, _id=None, _from=None,):
        self.name = name
        self.description = description
        self.version = version
        self.author = author
        self.homepage = homepage
        self.repository = repository
        self.bugs = bugs
        self.licenses = licenses
        self.main = main
        self.scripts = scripts
        self.engines = engines
        self.keywords = keywords
        self.dependencies = dependencies
        self.devDependencies = devDependencies
        self.readme = readme
        self._id = _id
        self._from = _from

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.description = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.version = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.author = Author()
                    self.author.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.homepage = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.repository = Repository()
                    self.repository.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.bugs = Bugs()
                    self.bugs.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.LIST:
                    self.licenses = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = License()
                        _elem5.read(iprot)
                        self.licenses.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.main = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRUCT:
                    self.scripts = Scripts()
                    self.scripts.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRUCT:
                    self.engines = Engines()
                    self.engines.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.LIST:
                    self.keywords = []
                    (_etype9, _size6) = iprot.readListBegin()
                    for _i10 in range(_size6):
                        _elem11 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.keywords.append(_elem11)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRUCT:
                    self.dependencies = Dependencies()
                    self.dependencies.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRUCT:
                    self.devDependencies = DevDependencies()
                    self.devDependencies.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRING:
                    self.readme = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.STRING:
                    self._id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.STRING:
                    self._from = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Main')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.description is not None:
            oprot.writeFieldBegin('description', TType.STRING, 2)
            oprot.writeString(self.description.encode('utf-8') if sys.version_info[0] == 2 else self.description)
            oprot.writeFieldEnd()
        if self.version is not None:
            oprot.writeFieldBegin('version', TType.STRING, 3)
            oprot.writeString(self.version.encode('utf-8') if sys.version_info[0] == 2 else self.version)
            oprot.writeFieldEnd()
        if self.author is not None:
            oprot.writeFieldBegin('author', TType.STRUCT, 4)
            self.author.write(oprot)
            oprot.writeFieldEnd()
        if self.homepage is not None:
            oprot.writeFieldBegin('homepage', TType.STRING, 5)
            oprot.writeString(self.homepage.encode('utf-8') if sys.version_info[0] == 2 else self.homepage)
            oprot.writeFieldEnd()
        if self.repository is not None:
            oprot.writeFieldBegin('repository', TType.STRUCT, 6)
            self.repository.write(oprot)
            oprot.writeFieldEnd()
        if self.bugs is not None:
            oprot.writeFieldBegin('bugs', TType.STRUCT, 7)
            self.bugs.write(oprot)
            oprot.writeFieldEnd()
        if self.licenses is not None:
            oprot.writeFieldBegin('licenses', TType.LIST, 8)
            oprot.writeListBegin(TType.STRUCT, len(self.licenses))
            for iter12 in self.licenses:
                iter12.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.main is not None:
            oprot.writeFieldBegin('main', TType.STRING, 9)
            oprot.writeString(self.main.encode('utf-8') if sys.version_info[0] == 2 else self.main)
            oprot.writeFieldEnd()
        if self.scripts is not None:
            oprot.writeFieldBegin('scripts', TType.STRUCT, 10)
            self.scripts.write(oprot)
            oprot.writeFieldEnd()
        if self.engines is not None:
            oprot.writeFieldBegin('engines', TType.STRUCT, 11)
            self.engines.write(oprot)
            oprot.writeFieldEnd()
        if self.keywords is not None:
            oprot.writeFieldBegin('keywords', TType.LIST, 12)
            oprot.writeListBegin(TType.STRING, len(self.keywords))
            for iter13 in self.keywords:
                oprot.writeString(iter13.encode('utf-8') if sys.version_info[0] == 2 else iter13)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.dependencies is not None:
            oprot.writeFieldBegin('dependencies', TType.STRUCT, 13)
            self.dependencies.write(oprot)
            oprot.writeFieldEnd()
        if self.devDependencies is not None:
            oprot.writeFieldBegin('devDependencies', TType.STRUCT, 14)
            self.devDependencies.write(oprot)
            oprot.writeFieldEnd()
        if self.readme is not None:
            oprot.writeFieldBegin('readme', TType.STRING, 15)
            oprot.writeString(self.readme.encode('utf-8') if sys.version_info[0] == 2 else self.readme)
            oprot.writeFieldEnd()
        if self._id is not None:
            oprot.writeFieldBegin('_id', TType.STRING, 16)
            oprot.writeString(self._id.encode('utf-8') if sys.version_info[0] == 2 else self._id)
            oprot.writeFieldEnd()
        if self._from is not None:
            oprot.writeFieldBegin('_from', TType.STRING, 17)
            oprot.writeString(self._from.encode('utf-8') if sys.version_info[0] == 2 else self._from)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.name is None:
            raise TProtocolException(message='Required field name is unset!')
        if self.description is None:
            raise TProtocolException(message='Required field description is unset!')
        if self.version is None:
            raise TProtocolException(message='Required field version is unset!')
        if self.author is None:
            raise TProtocolException(message='Required field author is unset!')
        if self.homepage is None:
            raise TProtocolException(message='Required field homepage is unset!')
        if self.repository is None:
            raise TProtocolException(message='Required field repository is unset!')
        if self.bugs is None:
            raise TProtocolException(message='Required field bugs is unset!')
        if self.licenses is None:
            raise TProtocolException(message='Required field licenses is unset!')
        if self.main is None:
            raise TProtocolException(message='Required field main is unset!')
        if self.scripts is None:
            raise TProtocolException(message='Required field scripts is unset!')
        if self.engines is None:
            raise TProtocolException(message='Required field engines is unset!')
        if self.keywords is None:
            raise TProtocolException(message='Required field keywords is unset!')
        if self.dependencies is None:
            raise TProtocolException(message='Required field dependencies is unset!')
        if self.devDependencies is None:
            raise TProtocolException(message='Required field devDependencies is unset!')
        if self.readme is None:
            raise TProtocolException(message='Required field readme is unset!')
        if self._id is None:
            raise TProtocolException(message='Required field _id is unset!')
        if self._from is None:
            raise TProtocolException(message='Required field _from is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(Author)
Author.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'url', 'UTF8', None, ),  # 2
)
all_structs.append(Repository)
Repository.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'type', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'url', 'UTF8', None, ),  # 2
)
all_structs.append(Bugs)
Bugs.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'url', 'UTF8', None, ),  # 1
)
all_structs.append(License)
License.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'type', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'url', 'UTF8', None, ),  # 2
)
all_structs.append(Scripts)
Scripts.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'test', 'UTF8', None, ),  # 1
)
all_structs.append(Engines)
Engines.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'node', 'UTF8', None, ),  # 1
)
all_structs.append(Dependencies)
Dependencies.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'async1', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'coffeeScript', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'colors', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'dateformat', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'eventemitter2', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'findupSync', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'glob', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'hooker', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'iconvLite', 'UTF8', None, ),  # 9
    (10, TType.STRING, 'minimatch', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'nopt', 'UTF8', None, ),  # 11
    (12, TType.STRING, 'rimraf', 'UTF8', None, ),  # 12
    (13, TType.STRING, 'lodash', 'UTF8', None, ),  # 13
    (14, TType.STRING, 'underscoreString', 'UTF8', None, ),  # 14
    (15, TType.STRING, 'which', 'UTF8', None, ),  # 15
    (16, TType.STRING, 'jsYaml', 'UTF8', None, ),  # 16
    (17, TType.STRING, 'exit', 'UTF8', None, ),  # 17
    (18, TType.STRING, 'getobject', 'UTF8', None, ),  # 18
    (19, TType.STRING, 'gruntLegacyUtil', 'UTF8', None, ),  # 19
    (20, TType.STRING, 'gruntLegacyLog', 'UTF8', None, ),  # 20
)
all_structs.append(DevDependencies)
DevDependencies.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'temporary', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'gruntContribJshint', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'gruntContribNodeunit', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'gruntContribWatch', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'difflet', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'semver', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'shelljs', 'UTF8', None, ),  # 7
)
all_structs.append(Main)
Main.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'description', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'version', 'UTF8', None, ),  # 3
    (4, TType.STRUCT, 'author', [Author, None], None, ),  # 4
    (5, TType.STRING, 'homepage', 'UTF8', None, ),  # 5
    (6, TType.STRUCT, 'repository', [Repository, None], None, ),  # 6
    (7, TType.STRUCT, 'bugs', [Bugs, None], None, ),  # 7
    (8, TType.LIST, 'licenses', (TType.STRUCT, [License, None], False), None, ),  # 8
    (9, TType.STRING, 'main', 'UTF8', None, ),  # 9
    (10, TType.STRUCT, 'scripts', [Scripts, None], None, ),  # 10
    (11, TType.STRUCT, 'engines', [Engines, None], None, ),  # 11
    (12, TType.LIST, 'keywords', (TType.STRING, 'UTF8', False), None, ),  # 12
    (13, TType.STRUCT, 'dependencies', [Dependencies, None], None, ),  # 13
    (14, TType.STRUCT, 'devDependencies', [DevDependencies, None], None, ),  # 14
    (15, TType.STRING, 'readme', 'UTF8', None, ),  # 15
    (16, TType.STRING, '_id', 'UTF8', None, ),  # 16
    (17, TType.STRING, '_from', 'UTF8', None, ),  # 17
)
fix_spec(all_structs)
del all_structs
