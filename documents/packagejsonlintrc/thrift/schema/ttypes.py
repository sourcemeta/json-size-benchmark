#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class ComplexRule(object):
    """
    Attributes:
     - textual
     - options
     - booleanOptions

    """


    def __init__(self, textual=None, options=None, booleanOptions=None,):
        self.textual = textual
        self.options = options
        self.booleanOptions = booleanOptions

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.textual = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.options = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.options.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.booleanOptions = []
                    (_etype9, _size6) = iprot.readListBegin()
                    for _i10 in range(_size6):
                        _elem11 = iprot.readBool()
                        self.booleanOptions.append(_elem11)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ComplexRule')
        if self.textual is not None:
            oprot.writeFieldBegin('textual', TType.STRING, 1)
            oprot.writeString(self.textual.encode('utf-8') if sys.version_info[0] == 2 else self.textual)
            oprot.writeFieldEnd()
        if self.options is not None:
            oprot.writeFieldBegin('options', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.options))
            for iter12 in self.options:
                oprot.writeString(iter12.encode('utf-8') if sys.version_info[0] == 2 else iter12)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.booleanOptions is not None:
            oprot.writeFieldBegin('booleanOptions', TType.LIST, 3)
            oprot.writeListBegin(TType.BOOL, len(self.booleanOptions))
            for iter13 in self.booleanOptions:
                oprot.writeBool(iter13)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Rules(object):
    """
    Attributes:
     - requireAuthor
     - requireDescription
     - requireEngines
     - requireLicense
     - requireName
     - requireRepository
     - requireVersion
     - requireBugs
     - requireHomepage
     - requireKeywords
     - binType
     - configType
     - descriptionType
     - devDependenciesType
     - directoriesType
     - enginesType
     - filesType
     - homepageType
     - keywordsType
     - licenseType
     - mainType
     - manType
     - nameType
     - preferGlobalType
     - privateType
     - repositoryType
     - scriptsType
     - versionType
     - validValuesAuthor
     - validValuesPrivate
     - noRestrictedDependencies
     - noRestrictedPreReleaseDependencies
     - noRestrictedInvalidDevDependencies
     - noRestrictedPreReleaseDevDependencies
     - nameFormat
     - versionFormat

    """


    def __init__(self, requireAuthor=None, requireDescription=None, requireEngines=None, requireLicense=None, requireName=None, requireRepository=None, requireVersion=None, requireBugs=None, requireHomepage=None, requireKeywords=None, binType=None, configType=None, descriptionType=None, devDependenciesType=None, directoriesType=None, enginesType=None, filesType=None, homepageType=None, keywordsType=None, licenseType=None, mainType=None, manType=None, nameType=None, preferGlobalType=None, privateType=None, repositoryType=None, scriptsType=None, versionType=None, validValuesAuthor=None, validValuesPrivate=None, noRestrictedDependencies=None, noRestrictedPreReleaseDependencies=None, noRestrictedInvalidDevDependencies=None, noRestrictedPreReleaseDevDependencies=None, nameFormat=None, versionFormat=None,):
        self.requireAuthor = requireAuthor
        self.requireDescription = requireDescription
        self.requireEngines = requireEngines
        self.requireLicense = requireLicense
        self.requireName = requireName
        self.requireRepository = requireRepository
        self.requireVersion = requireVersion
        self.requireBugs = requireBugs
        self.requireHomepage = requireHomepage
        self.requireKeywords = requireKeywords
        self.binType = binType
        self.configType = configType
        self.descriptionType = descriptionType
        self.devDependenciesType = devDependenciesType
        self.directoriesType = directoriesType
        self.enginesType = enginesType
        self.filesType = filesType
        self.homepageType = homepageType
        self.keywordsType = keywordsType
        self.licenseType = licenseType
        self.mainType = mainType
        self.manType = manType
        self.nameType = nameType
        self.preferGlobalType = preferGlobalType
        self.privateType = privateType
        self.repositoryType = repositoryType
        self.scriptsType = scriptsType
        self.versionType = versionType
        self.validValuesAuthor = validValuesAuthor
        self.validValuesPrivate = validValuesPrivate
        self.noRestrictedDependencies = noRestrictedDependencies
        self.noRestrictedPreReleaseDependencies = noRestrictedPreReleaseDependencies
        self.noRestrictedInvalidDevDependencies = noRestrictedInvalidDevDependencies
        self.noRestrictedPreReleaseDevDependencies = noRestrictedPreReleaseDevDependencies
        self.nameFormat = nameFormat
        self.versionFormat = versionFormat

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.requireAuthor = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.requireDescription = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.requireEngines = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.requireLicense = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.requireName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.requireRepository = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.requireVersion = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.requireBugs = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.requireHomepage = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.requireKeywords = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.binType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.configType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.descriptionType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.devDependenciesType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRING:
                    self.directoriesType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.STRING:
                    self.enginesType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.STRING:
                    self.filesType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.STRING:
                    self.homepageType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.STRING:
                    self.keywordsType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.STRING:
                    self.licenseType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.STRING:
                    self.mainType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.STRING:
                    self.manType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.STRING:
                    self.nameType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.STRING:
                    self.preferGlobalType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 25:
                if ftype == TType.STRING:
                    self.privateType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 26:
                if ftype == TType.STRING:
                    self.repositoryType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 27:
                if ftype == TType.STRING:
                    self.scriptsType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 28:
                if ftype == TType.STRING:
                    self.versionType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 29:
                if ftype == TType.LIST:
                    self.validValuesAuthor = []
                    (_etype17, _size14) = iprot.readListBegin()
                    for _i18 in range(_size14):
                        _elem19 = ComplexRule()
                        _elem19.read(iprot)
                        self.validValuesAuthor.append(_elem19)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 30:
                if ftype == TType.LIST:
                    self.validValuesPrivate = []
                    (_etype23, _size20) = iprot.readListBegin()
                    for _i24 in range(_size20):
                        _elem25 = ComplexRule()
                        _elem25.read(iprot)
                        self.validValuesPrivate.append(_elem25)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 31:
                if ftype == TType.LIST:
                    self.noRestrictedDependencies = []
                    (_etype29, _size26) = iprot.readListBegin()
                    for _i30 in range(_size26):
                        _elem31 = ComplexRule()
                        _elem31.read(iprot)
                        self.noRestrictedDependencies.append(_elem31)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 32:
                if ftype == TType.LIST:
                    self.noRestrictedPreReleaseDependencies = []
                    (_etype35, _size32) = iprot.readListBegin()
                    for _i36 in range(_size32):
                        _elem37 = ComplexRule()
                        _elem37.read(iprot)
                        self.noRestrictedPreReleaseDependencies.append(_elem37)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 33:
                if ftype == TType.LIST:
                    self.noRestrictedInvalidDevDependencies = []
                    (_etype41, _size38) = iprot.readListBegin()
                    for _i42 in range(_size38):
                        _elem43 = ComplexRule()
                        _elem43.read(iprot)
                        self.noRestrictedInvalidDevDependencies.append(_elem43)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 34:
                if ftype == TType.LIST:
                    self.noRestrictedPreReleaseDevDependencies = []
                    (_etype47, _size44) = iprot.readListBegin()
                    for _i48 in range(_size44):
                        _elem49 = ComplexRule()
                        _elem49.read(iprot)
                        self.noRestrictedPreReleaseDevDependencies.append(_elem49)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 35:
                if ftype == TType.STRING:
                    self.nameFormat = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 36:
                if ftype == TType.STRING:
                    self.versionFormat = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Rules')
        if self.requireAuthor is not None:
            oprot.writeFieldBegin('requireAuthor', TType.STRING, 1)
            oprot.writeString(self.requireAuthor.encode('utf-8') if sys.version_info[0] == 2 else self.requireAuthor)
            oprot.writeFieldEnd()
        if self.requireDescription is not None:
            oprot.writeFieldBegin('requireDescription', TType.STRING, 2)
            oprot.writeString(self.requireDescription.encode('utf-8') if sys.version_info[0] == 2 else self.requireDescription)
            oprot.writeFieldEnd()
        if self.requireEngines is not None:
            oprot.writeFieldBegin('requireEngines', TType.STRING, 3)
            oprot.writeString(self.requireEngines.encode('utf-8') if sys.version_info[0] == 2 else self.requireEngines)
            oprot.writeFieldEnd()
        if self.requireLicense is not None:
            oprot.writeFieldBegin('requireLicense', TType.STRING, 4)
            oprot.writeString(self.requireLicense.encode('utf-8') if sys.version_info[0] == 2 else self.requireLicense)
            oprot.writeFieldEnd()
        if self.requireName is not None:
            oprot.writeFieldBegin('requireName', TType.STRING, 5)
            oprot.writeString(self.requireName.encode('utf-8') if sys.version_info[0] == 2 else self.requireName)
            oprot.writeFieldEnd()
        if self.requireRepository is not None:
            oprot.writeFieldBegin('requireRepository', TType.STRING, 6)
            oprot.writeString(self.requireRepository.encode('utf-8') if sys.version_info[0] == 2 else self.requireRepository)
            oprot.writeFieldEnd()
        if self.requireVersion is not None:
            oprot.writeFieldBegin('requireVersion', TType.STRING, 7)
            oprot.writeString(self.requireVersion.encode('utf-8') if sys.version_info[0] == 2 else self.requireVersion)
            oprot.writeFieldEnd()
        if self.requireBugs is not None:
            oprot.writeFieldBegin('requireBugs', TType.STRING, 8)
            oprot.writeString(self.requireBugs.encode('utf-8') if sys.version_info[0] == 2 else self.requireBugs)
            oprot.writeFieldEnd()
        if self.requireHomepage is not None:
            oprot.writeFieldBegin('requireHomepage', TType.STRING, 9)
            oprot.writeString(self.requireHomepage.encode('utf-8') if sys.version_info[0] == 2 else self.requireHomepage)
            oprot.writeFieldEnd()
        if self.requireKeywords is not None:
            oprot.writeFieldBegin('requireKeywords', TType.STRING, 10)
            oprot.writeString(self.requireKeywords.encode('utf-8') if sys.version_info[0] == 2 else self.requireKeywords)
            oprot.writeFieldEnd()
        if self.binType is not None:
            oprot.writeFieldBegin('binType', TType.STRING, 11)
            oprot.writeString(self.binType.encode('utf-8') if sys.version_info[0] == 2 else self.binType)
            oprot.writeFieldEnd()
        if self.configType is not None:
            oprot.writeFieldBegin('configType', TType.STRING, 12)
            oprot.writeString(self.configType.encode('utf-8') if sys.version_info[0] == 2 else self.configType)
            oprot.writeFieldEnd()
        if self.descriptionType is not None:
            oprot.writeFieldBegin('descriptionType', TType.STRING, 13)
            oprot.writeString(self.descriptionType.encode('utf-8') if sys.version_info[0] == 2 else self.descriptionType)
            oprot.writeFieldEnd()
        if self.devDependenciesType is not None:
            oprot.writeFieldBegin('devDependenciesType', TType.STRING, 14)
            oprot.writeString(self.devDependenciesType.encode('utf-8') if sys.version_info[0] == 2 else self.devDependenciesType)
            oprot.writeFieldEnd()
        if self.directoriesType is not None:
            oprot.writeFieldBegin('directoriesType', TType.STRING, 15)
            oprot.writeString(self.directoriesType.encode('utf-8') if sys.version_info[0] == 2 else self.directoriesType)
            oprot.writeFieldEnd()
        if self.enginesType is not None:
            oprot.writeFieldBegin('enginesType', TType.STRING, 16)
            oprot.writeString(self.enginesType.encode('utf-8') if sys.version_info[0] == 2 else self.enginesType)
            oprot.writeFieldEnd()
        if self.filesType is not None:
            oprot.writeFieldBegin('filesType', TType.STRING, 17)
            oprot.writeString(self.filesType.encode('utf-8') if sys.version_info[0] == 2 else self.filesType)
            oprot.writeFieldEnd()
        if self.homepageType is not None:
            oprot.writeFieldBegin('homepageType', TType.STRING, 18)
            oprot.writeString(self.homepageType.encode('utf-8') if sys.version_info[0] == 2 else self.homepageType)
            oprot.writeFieldEnd()
        if self.keywordsType is not None:
            oprot.writeFieldBegin('keywordsType', TType.STRING, 19)
            oprot.writeString(self.keywordsType.encode('utf-8') if sys.version_info[0] == 2 else self.keywordsType)
            oprot.writeFieldEnd()
        if self.licenseType is not None:
            oprot.writeFieldBegin('licenseType', TType.STRING, 20)
            oprot.writeString(self.licenseType.encode('utf-8') if sys.version_info[0] == 2 else self.licenseType)
            oprot.writeFieldEnd()
        if self.mainType is not None:
            oprot.writeFieldBegin('mainType', TType.STRING, 21)
            oprot.writeString(self.mainType.encode('utf-8') if sys.version_info[0] == 2 else self.mainType)
            oprot.writeFieldEnd()
        if self.manType is not None:
            oprot.writeFieldBegin('manType', TType.STRING, 22)
            oprot.writeString(self.manType.encode('utf-8') if sys.version_info[0] == 2 else self.manType)
            oprot.writeFieldEnd()
        if self.nameType is not None:
            oprot.writeFieldBegin('nameType', TType.STRING, 23)
            oprot.writeString(self.nameType.encode('utf-8') if sys.version_info[0] == 2 else self.nameType)
            oprot.writeFieldEnd()
        if self.preferGlobalType is not None:
            oprot.writeFieldBegin('preferGlobalType', TType.STRING, 24)
            oprot.writeString(self.preferGlobalType.encode('utf-8') if sys.version_info[0] == 2 else self.preferGlobalType)
            oprot.writeFieldEnd()
        if self.privateType is not None:
            oprot.writeFieldBegin('privateType', TType.STRING, 25)
            oprot.writeString(self.privateType.encode('utf-8') if sys.version_info[0] == 2 else self.privateType)
            oprot.writeFieldEnd()
        if self.repositoryType is not None:
            oprot.writeFieldBegin('repositoryType', TType.STRING, 26)
            oprot.writeString(self.repositoryType.encode('utf-8') if sys.version_info[0] == 2 else self.repositoryType)
            oprot.writeFieldEnd()
        if self.scriptsType is not None:
            oprot.writeFieldBegin('scriptsType', TType.STRING, 27)
            oprot.writeString(self.scriptsType.encode('utf-8') if sys.version_info[0] == 2 else self.scriptsType)
            oprot.writeFieldEnd()
        if self.versionType is not None:
            oprot.writeFieldBegin('versionType', TType.STRING, 28)
            oprot.writeString(self.versionType.encode('utf-8') if sys.version_info[0] == 2 else self.versionType)
            oprot.writeFieldEnd()
        if self.validValuesAuthor is not None:
            oprot.writeFieldBegin('validValuesAuthor', TType.LIST, 29)
            oprot.writeListBegin(TType.STRUCT, len(self.validValuesAuthor))
            for iter50 in self.validValuesAuthor:
                iter50.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.validValuesPrivate is not None:
            oprot.writeFieldBegin('validValuesPrivate', TType.LIST, 30)
            oprot.writeListBegin(TType.STRUCT, len(self.validValuesPrivate))
            for iter51 in self.validValuesPrivate:
                iter51.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.noRestrictedDependencies is not None:
            oprot.writeFieldBegin('noRestrictedDependencies', TType.LIST, 31)
            oprot.writeListBegin(TType.STRUCT, len(self.noRestrictedDependencies))
            for iter52 in self.noRestrictedDependencies:
                iter52.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.noRestrictedPreReleaseDependencies is not None:
            oprot.writeFieldBegin('noRestrictedPreReleaseDependencies', TType.LIST, 32)
            oprot.writeListBegin(TType.STRUCT, len(self.noRestrictedPreReleaseDependencies))
            for iter53 in self.noRestrictedPreReleaseDependencies:
                iter53.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.noRestrictedInvalidDevDependencies is not None:
            oprot.writeFieldBegin('noRestrictedInvalidDevDependencies', TType.LIST, 33)
            oprot.writeListBegin(TType.STRUCT, len(self.noRestrictedInvalidDevDependencies))
            for iter54 in self.noRestrictedInvalidDevDependencies:
                iter54.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.noRestrictedPreReleaseDevDependencies is not None:
            oprot.writeFieldBegin('noRestrictedPreReleaseDevDependencies', TType.LIST, 34)
            oprot.writeListBegin(TType.STRUCT, len(self.noRestrictedPreReleaseDevDependencies))
            for iter55 in self.noRestrictedPreReleaseDevDependencies:
                iter55.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.nameFormat is not None:
            oprot.writeFieldBegin('nameFormat', TType.STRING, 35)
            oprot.writeString(self.nameFormat.encode('utf-8') if sys.version_info[0] == 2 else self.nameFormat)
            oprot.writeFieldEnd()
        if self.versionFormat is not None:
            oprot.writeFieldBegin('versionFormat', TType.STRING, 36)
            oprot.writeString(self.versionFormat.encode('utf-8') if sys.version_info[0] == 2 else self.versionFormat)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.requireAuthor is None:
            raise TProtocolException(message='Required field requireAuthor is unset!')
        if self.requireDescription is None:
            raise TProtocolException(message='Required field requireDescription is unset!')
        if self.requireEngines is None:
            raise TProtocolException(message='Required field requireEngines is unset!')
        if self.requireLicense is None:
            raise TProtocolException(message='Required field requireLicense is unset!')
        if self.requireName is None:
            raise TProtocolException(message='Required field requireName is unset!')
        if self.requireRepository is None:
            raise TProtocolException(message='Required field requireRepository is unset!')
        if self.requireVersion is None:
            raise TProtocolException(message='Required field requireVersion is unset!')
        if self.requireBugs is None:
            raise TProtocolException(message='Required field requireBugs is unset!')
        if self.requireHomepage is None:
            raise TProtocolException(message='Required field requireHomepage is unset!')
        if self.requireKeywords is None:
            raise TProtocolException(message='Required field requireKeywords is unset!')
        if self.binType is None:
            raise TProtocolException(message='Required field binType is unset!')
        if self.configType is None:
            raise TProtocolException(message='Required field configType is unset!')
        if self.descriptionType is None:
            raise TProtocolException(message='Required field descriptionType is unset!')
        if self.devDependenciesType is None:
            raise TProtocolException(message='Required field devDependenciesType is unset!')
        if self.directoriesType is None:
            raise TProtocolException(message='Required field directoriesType is unset!')
        if self.enginesType is None:
            raise TProtocolException(message='Required field enginesType is unset!')
        if self.filesType is None:
            raise TProtocolException(message='Required field filesType is unset!')
        if self.homepageType is None:
            raise TProtocolException(message='Required field homepageType is unset!')
        if self.keywordsType is None:
            raise TProtocolException(message='Required field keywordsType is unset!')
        if self.licenseType is None:
            raise TProtocolException(message='Required field licenseType is unset!')
        if self.mainType is None:
            raise TProtocolException(message='Required field mainType is unset!')
        if self.manType is None:
            raise TProtocolException(message='Required field manType is unset!')
        if self.nameType is None:
            raise TProtocolException(message='Required field nameType is unset!')
        if self.preferGlobalType is None:
            raise TProtocolException(message='Required field preferGlobalType is unset!')
        if self.privateType is None:
            raise TProtocolException(message='Required field privateType is unset!')
        if self.repositoryType is None:
            raise TProtocolException(message='Required field repositoryType is unset!')
        if self.scriptsType is None:
            raise TProtocolException(message='Required field scriptsType is unset!')
        if self.versionType is None:
            raise TProtocolException(message='Required field versionType is unset!')
        if self.validValuesAuthor is None:
            raise TProtocolException(message='Required field validValuesAuthor is unset!')
        if self.validValuesPrivate is None:
            raise TProtocolException(message='Required field validValuesPrivate is unset!')
        if self.noRestrictedDependencies is None:
            raise TProtocolException(message='Required field noRestrictedDependencies is unset!')
        if self.noRestrictedPreReleaseDependencies is None:
            raise TProtocolException(message='Required field noRestrictedPreReleaseDependencies is unset!')
        if self.noRestrictedInvalidDevDependencies is None:
            raise TProtocolException(message='Required field noRestrictedInvalidDevDependencies is unset!')
        if self.noRestrictedPreReleaseDevDependencies is None:
            raise TProtocolException(message='Required field noRestrictedPreReleaseDevDependencies is unset!')
        if self.nameFormat is None:
            raise TProtocolException(message='Required field nameFormat is unset!')
        if self.versionFormat is None:
            raise TProtocolException(message='Required field versionFormat is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Main(object):
    """
    Attributes:
     - rules

    """


    def __init__(self, rules=None,):
        self.rules = rules

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.rules = Rules()
                    self.rules.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Main')
        if self.rules is not None:
            oprot.writeFieldBegin('rules', TType.STRUCT, 1)
            self.rules.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.rules is None:
            raise TProtocolException(message='Required field rules is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ComplexRule)
ComplexRule.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'textual', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'options', (TType.STRING, 'UTF8', False), None, ),  # 2
    (3, TType.LIST, 'booleanOptions', (TType.BOOL, None, False), None, ),  # 3
)
all_structs.append(Rules)
Rules.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'requireAuthor', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'requireDescription', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'requireEngines', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'requireLicense', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'requireName', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'requireRepository', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'requireVersion', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'requireBugs', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'requireHomepage', 'UTF8', None, ),  # 9
    (10, TType.STRING, 'requireKeywords', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'binType', 'UTF8', None, ),  # 11
    (12, TType.STRING, 'configType', 'UTF8', None, ),  # 12
    (13, TType.STRING, 'descriptionType', 'UTF8', None, ),  # 13
    (14, TType.STRING, 'devDependenciesType', 'UTF8', None, ),  # 14
    (15, TType.STRING, 'directoriesType', 'UTF8', None, ),  # 15
    (16, TType.STRING, 'enginesType', 'UTF8', None, ),  # 16
    (17, TType.STRING, 'filesType', 'UTF8', None, ),  # 17
    (18, TType.STRING, 'homepageType', 'UTF8', None, ),  # 18
    (19, TType.STRING, 'keywordsType', 'UTF8', None, ),  # 19
    (20, TType.STRING, 'licenseType', 'UTF8', None, ),  # 20
    (21, TType.STRING, 'mainType', 'UTF8', None, ),  # 21
    (22, TType.STRING, 'manType', 'UTF8', None, ),  # 22
    (23, TType.STRING, 'nameType', 'UTF8', None, ),  # 23
    (24, TType.STRING, 'preferGlobalType', 'UTF8', None, ),  # 24
    (25, TType.STRING, 'privateType', 'UTF8', None, ),  # 25
    (26, TType.STRING, 'repositoryType', 'UTF8', None, ),  # 26
    (27, TType.STRING, 'scriptsType', 'UTF8', None, ),  # 27
    (28, TType.STRING, 'versionType', 'UTF8', None, ),  # 28
    (29, TType.LIST, 'validValuesAuthor', (TType.STRUCT, [ComplexRule, None], False), None, ),  # 29
    (30, TType.LIST, 'validValuesPrivate', (TType.STRUCT, [ComplexRule, None], False), None, ),  # 30
    (31, TType.LIST, 'noRestrictedDependencies', (TType.STRUCT, [ComplexRule, None], False), None, ),  # 31
    (32, TType.LIST, 'noRestrictedPreReleaseDependencies', (TType.STRUCT, [ComplexRule, None], False), None, ),  # 32
    (33, TType.LIST, 'noRestrictedInvalidDevDependencies', (TType.STRUCT, [ComplexRule, None], False), None, ),  # 33
    (34, TType.LIST, 'noRestrictedPreReleaseDevDependencies', (TType.STRUCT, [ComplexRule, None], False), None, ),  # 34
    (35, TType.STRING, 'nameFormat', 'UTF8', None, ),  # 35
    (36, TType.STRING, 'versionFormat', 'UTF8', None, ),  # 36
)
all_structs.append(Main)
Main.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'rules', [Rules, None], None, ),  # 1
)
fix_spec(all_structs)
del all_structs
