#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class Main(object):
    """
    Attributes:
     - github
     - patreon
     - open_collective
     - ko_fi
     - tidelift
     - community_bridge
     - liberapay
     - issuehunt
     - otechie
     - custom

    """


    def __init__(self, github=None, patreon=None, open_collective=None, ko_fi=None, tidelift=None, community_bridge=None, liberapay=None, issuehunt=None, otechie=None, custom=None,):
        self.github = github
        self.patreon = patreon
        self.open_collective = open_collective
        self.ko_fi = ko_fi
        self.tidelift = tidelift
        self.community_bridge = community_bridge
        self.liberapay = liberapay
        self.issuehunt = issuehunt
        self.otechie = otechie
        self.custom = custom

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.github = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.patreon = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.open_collective = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.ko_fi = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.tidelift = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.community_bridge = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.liberapay = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.issuehunt = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.otechie = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.custom = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Main')
        if self.github is not None:
            oprot.writeFieldBegin('github', TType.STRING, 1)
            oprot.writeString(self.github.encode('utf-8') if sys.version_info[0] == 2 else self.github)
            oprot.writeFieldEnd()
        if self.patreon is not None:
            oprot.writeFieldBegin('patreon', TType.STRING, 2)
            oprot.writeString(self.patreon.encode('utf-8') if sys.version_info[0] == 2 else self.patreon)
            oprot.writeFieldEnd()
        if self.open_collective is not None:
            oprot.writeFieldBegin('open_collective', TType.STRING, 3)
            oprot.writeString(self.open_collective.encode('utf-8') if sys.version_info[0] == 2 else self.open_collective)
            oprot.writeFieldEnd()
        if self.ko_fi is not None:
            oprot.writeFieldBegin('ko_fi', TType.STRING, 4)
            oprot.writeString(self.ko_fi.encode('utf-8') if sys.version_info[0] == 2 else self.ko_fi)
            oprot.writeFieldEnd()
        if self.tidelift is not None:
            oprot.writeFieldBegin('tidelift', TType.STRING, 5)
            oprot.writeString(self.tidelift.encode('utf-8') if sys.version_info[0] == 2 else self.tidelift)
            oprot.writeFieldEnd()
        if self.community_bridge is not None:
            oprot.writeFieldBegin('community_bridge', TType.STRING, 6)
            oprot.writeString(self.community_bridge.encode('utf-8') if sys.version_info[0] == 2 else self.community_bridge)
            oprot.writeFieldEnd()
        if self.liberapay is not None:
            oprot.writeFieldBegin('liberapay', TType.STRING, 7)
            oprot.writeString(self.liberapay.encode('utf-8') if sys.version_info[0] == 2 else self.liberapay)
            oprot.writeFieldEnd()
        if self.issuehunt is not None:
            oprot.writeFieldBegin('issuehunt', TType.STRING, 8)
            oprot.writeString(self.issuehunt.encode('utf-8') if sys.version_info[0] == 2 else self.issuehunt)
            oprot.writeFieldEnd()
        if self.otechie is not None:
            oprot.writeFieldBegin('otechie', TType.STRING, 9)
            oprot.writeString(self.otechie.encode('utf-8') if sys.version_info[0] == 2 else self.otechie)
            oprot.writeFieldEnd()
        if self.custom is not None:
            oprot.writeFieldBegin('custom', TType.STRING, 10)
            oprot.writeString(self.custom.encode('utf-8') if sys.version_info[0] == 2 else self.custom)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.github is None:
            raise TProtocolException(message='Required field github is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(Main)
Main.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'github', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'patreon', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'open_collective', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'ko_fi', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'tidelift', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'community_bridge', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'liberapay', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'issuehunt', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'otechie', 'UTF8', None, ),  # 9
    (10, TType.STRING, 'custom', 'UTF8', None, ),  # 10
)
fix_spec(all_structs)
del all_structs
