#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class Alert(object):
    """
    Attributes:
     - sender_name
     - event
     - event_level

    """


    def __init__(self, sender_name=None, event=None, event_level=None,):
        self.sender_name = sender_name
        self.event = event
        self.event_level = event_level

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.sender_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.event = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BYTE:
                    self.event_level = iprot.readByte()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Alert')
        if self.sender_name is not None:
            oprot.writeFieldBegin('sender_name', TType.STRING, 1)
            oprot.writeString(self.sender_name.encode('utf-8') if sys.version_info[0] == 2 else self.sender_name)
            oprot.writeFieldEnd()
        if self.event is not None:
            oprot.writeFieldBegin('event', TType.STRING, 2)
            oprot.writeString(self.event.encode('utf-8') if sys.version_info[0] == 2 else self.event)
            oprot.writeFieldEnd()
        if self.event_level is not None:
            oprot.writeFieldBegin('event_level', TType.BYTE, 3)
            oprot.writeByte(self.event_level)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.sender_name is None:
            raise TProtocolException(message='Required field sender_name is unset!')
        if self.event is None:
            raise TProtocolException(message='Required field event is unset!')
        if self.event_level is None:
            raise TProtocolException(message='Required field event_level is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Weather(object):
    """
    Attributes:
     - temp
     - wind_speed
     - wind_deg
     - precipitation_intensity
     - dew_point

    """


    def __init__(self, temp=None, wind_speed=None, wind_deg=None, precipitation_intensity=None, dew_point=None,):
        self.temp = temp
        self.wind_speed = wind_speed
        self.wind_deg = wind_deg
        self.precipitation_intensity = precipitation_intensity
        self.dew_point = dew_point

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.temp = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.wind_speed = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I16:
                    self.wind_deg = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.precipitation_intensity = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.dew_point = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Weather')
        if self.temp is not None:
            oprot.writeFieldBegin('temp', TType.DOUBLE, 1)
            oprot.writeDouble(self.temp)
            oprot.writeFieldEnd()
        if self.wind_speed is not None:
            oprot.writeFieldBegin('wind_speed', TType.DOUBLE, 2)
            oprot.writeDouble(self.wind_speed)
            oprot.writeFieldEnd()
        if self.wind_deg is not None:
            oprot.writeFieldBegin('wind_deg', TType.I16, 3)
            oprot.writeI16(self.wind_deg)
            oprot.writeFieldEnd()
        if self.precipitation_intensity is not None:
            oprot.writeFieldBegin('precipitation_intensity', TType.DOUBLE, 4)
            oprot.writeDouble(self.precipitation_intensity)
            oprot.writeFieldEnd()
        if self.dew_point is not None:
            oprot.writeFieldBegin('dew_point', TType.DOUBLE, 5)
            oprot.writeDouble(self.dew_point)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.temp is None:
            raise TProtocolException(message='Required field temp is unset!')
        if self.wind_speed is None:
            raise TProtocolException(message='Required field wind_speed is unset!')
        if self.wind_deg is None:
            raise TProtocolException(message='Required field wind_deg is unset!')
        if self.dew_point is None:
            raise TProtocolException(message='Required field dew_point is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RoadRisk(object):
    """
    Attributes:
     - dt
     - coord
     - weather
     - alerts

    """


    def __init__(self, dt=None, coord=None, weather=None, alerts=None,):
        self.dt = dt
        self.coord = coord
        self.weather = weather
        self.alerts = alerts

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dt = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.coord = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readDouble()
                        self.coord.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.weather = Weather()
                    self.weather.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.alerts = []
                    (_etype9, _size6) = iprot.readListBegin()
                    for _i10 in range(_size6):
                        _elem11 = Alert()
                        _elem11.read(iprot)
                        self.alerts.append(_elem11)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RoadRisk')
        if self.dt is not None:
            oprot.writeFieldBegin('dt', TType.I32, 1)
            oprot.writeI32(self.dt)
            oprot.writeFieldEnd()
        if self.coord is not None:
            oprot.writeFieldBegin('coord', TType.LIST, 2)
            oprot.writeListBegin(TType.DOUBLE, len(self.coord))
            for iter12 in self.coord:
                oprot.writeDouble(iter12)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.weather is not None:
            oprot.writeFieldBegin('weather', TType.STRUCT, 3)
            self.weather.write(oprot)
            oprot.writeFieldEnd()
        if self.alerts is not None:
            oprot.writeFieldBegin('alerts', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.alerts))
            for iter13 in self.alerts:
                iter13.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.dt is None:
            raise TProtocolException(message='Required field dt is unset!')
        if self.coord is None:
            raise TProtocolException(message='Required field coord is unset!')
        if self.weather is None:
            raise TProtocolException(message='Required field weather is unset!')
        if self.alerts is None:
            raise TProtocolException(message='Required field alerts is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Main(object):
    """
    Attributes:
     - risks

    """


    def __init__(self, risks=None,):
        self.risks = risks

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.risks = []
                    (_etype17, _size14) = iprot.readListBegin()
                    for _i18 in range(_size14):
                        _elem19 = RoadRisk()
                        _elem19.read(iprot)
                        self.risks.append(_elem19)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Main')
        if self.risks is not None:
            oprot.writeFieldBegin('risks', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.risks))
            for iter20 in self.risks:
                iter20.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.risks is None:
            raise TProtocolException(message='Required field risks is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(Alert)
Alert.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'sender_name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'event', 'UTF8', None, ),  # 2
    (3, TType.BYTE, 'event_level', None, None, ),  # 3
)
all_structs.append(Weather)
Weather.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'temp', None, None, ),  # 1
    (2, TType.DOUBLE, 'wind_speed', None, None, ),  # 2
    (3, TType.I16, 'wind_deg', None, None, ),  # 3
    (4, TType.DOUBLE, 'precipitation_intensity', None, None, ),  # 4
    (5, TType.DOUBLE, 'dew_point', None, None, ),  # 5
)
all_structs.append(RoadRisk)
RoadRisk.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dt', None, None, ),  # 1
    (2, TType.LIST, 'coord', (TType.DOUBLE, None, False), None, ),  # 2
    (3, TType.STRUCT, 'weather', [Weather, None], None, ),  # 3
    (4, TType.LIST, 'alerts', (TType.STRUCT, [Alert, None], False), None, ),  # 4
)
all_structs.append(Main)
Main.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'risks', (TType.STRUCT, [RoadRisk, None], False), None, ),  # 1
)
fix_spec(all_structs)
del all_structs
