#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class Location(object):
    """
    Attributes:
     - address
     - postalCode
     - city
     - countryCode
     - region

    """


    def __init__(self, address=None, postalCode=None, city=None, countryCode=None, region=None,):
        self.address = address
        self.postalCode = postalCode
        self.city = city
        self.countryCode = countryCode
        self.region = region

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.address = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.postalCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.city = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.countryCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.region = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Location')
        if self.address is not None:
            oprot.writeFieldBegin('address', TType.STRING, 1)
            oprot.writeString(self.address.encode('utf-8') if sys.version_info[0] == 2 else self.address)
            oprot.writeFieldEnd()
        if self.postalCode is not None:
            oprot.writeFieldBegin('postalCode', TType.STRING, 2)
            oprot.writeString(self.postalCode.encode('utf-8') if sys.version_info[0] == 2 else self.postalCode)
            oprot.writeFieldEnd()
        if self.city is not None:
            oprot.writeFieldBegin('city', TType.STRING, 3)
            oprot.writeString(self.city.encode('utf-8') if sys.version_info[0] == 2 else self.city)
            oprot.writeFieldEnd()
        if self.countryCode is not None:
            oprot.writeFieldBegin('countryCode', TType.STRING, 4)
            oprot.writeString(self.countryCode.encode('utf-8') if sys.version_info[0] == 2 else self.countryCode)
            oprot.writeFieldEnd()
        if self.region is not None:
            oprot.writeFieldBegin('region', TType.STRING, 5)
            oprot.writeString(self.region.encode('utf-8') if sys.version_info[0] == 2 else self.region)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.address is None:
            raise TProtocolException(message='Required field address is unset!')
        if self.postalCode is None:
            raise TProtocolException(message='Required field postalCode is unset!')
        if self.city is None:
            raise TProtocolException(message='Required field city is unset!')
        if self.countryCode is None:
            raise TProtocolException(message='Required field countryCode is unset!')
        if self.region is None:
            raise TProtocolException(message='Required field region is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Profile(object):
    """
    Attributes:
     - network
     - username
     - url

    """


    def __init__(self, network=None, username=None, url=None,):
        self.network = network
        self.username = username
        self.url = url

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.network = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.username = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.url = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Profile')
        if self.network is not None:
            oprot.writeFieldBegin('network', TType.STRING, 1)
            oprot.writeString(self.network.encode('utf-8') if sys.version_info[0] == 2 else self.network)
            oprot.writeFieldEnd()
        if self.username is not None:
            oprot.writeFieldBegin('username', TType.STRING, 2)
            oprot.writeString(self.username.encode('utf-8') if sys.version_info[0] == 2 else self.username)
            oprot.writeFieldEnd()
        if self.url is not None:
            oprot.writeFieldBegin('url', TType.STRING, 3)
            oprot.writeString(self.url.encode('utf-8') if sys.version_info[0] == 2 else self.url)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.network is None:
            raise TProtocolException(message='Required field network is unset!')
        if self.username is None:
            raise TProtocolException(message='Required field username is unset!')
        if self.url is None:
            raise TProtocolException(message='Required field url is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Basics(object):
    """
    Attributes:
     - name
     - label
     - picture
     - email
     - phone
     - website
     - summary
     - location
     - profiles

    """


    def __init__(self, name=None, label=None, picture=None, email=None, phone=None, website=None, summary=None, location=None, profiles=None,):
        self.name = name
        self.label = label
        self.picture = picture
        self.email = email
        self.phone = phone
        self.website = website
        self.summary = summary
        self.location = location
        self.profiles = profiles

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.label = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.picture = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.email = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.phone = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.website = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.summary = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRUCT:
                    self.location = Location()
                    self.location.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.LIST:
                    self.profiles = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = Profile()
                        _elem5.read(iprot)
                        self.profiles.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Basics')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.label is not None:
            oprot.writeFieldBegin('label', TType.STRING, 2)
            oprot.writeString(self.label.encode('utf-8') if sys.version_info[0] == 2 else self.label)
            oprot.writeFieldEnd()
        if self.picture is not None:
            oprot.writeFieldBegin('picture', TType.STRING, 3)
            oprot.writeString(self.picture.encode('utf-8') if sys.version_info[0] == 2 else self.picture)
            oprot.writeFieldEnd()
        if self.email is not None:
            oprot.writeFieldBegin('email', TType.STRING, 4)
            oprot.writeString(self.email.encode('utf-8') if sys.version_info[0] == 2 else self.email)
            oprot.writeFieldEnd()
        if self.phone is not None:
            oprot.writeFieldBegin('phone', TType.STRING, 5)
            oprot.writeString(self.phone.encode('utf-8') if sys.version_info[0] == 2 else self.phone)
            oprot.writeFieldEnd()
        if self.website is not None:
            oprot.writeFieldBegin('website', TType.STRING, 6)
            oprot.writeString(self.website.encode('utf-8') if sys.version_info[0] == 2 else self.website)
            oprot.writeFieldEnd()
        if self.summary is not None:
            oprot.writeFieldBegin('summary', TType.STRING, 7)
            oprot.writeString(self.summary.encode('utf-8') if sys.version_info[0] == 2 else self.summary)
            oprot.writeFieldEnd()
        if self.location is not None:
            oprot.writeFieldBegin('location', TType.STRUCT, 8)
            self.location.write(oprot)
            oprot.writeFieldEnd()
        if self.profiles is not None:
            oprot.writeFieldBegin('profiles', TType.LIST, 9)
            oprot.writeListBegin(TType.STRUCT, len(self.profiles))
            for iter6 in self.profiles:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.name is None:
            raise TProtocolException(message='Required field name is unset!')
        if self.label is None:
            raise TProtocolException(message='Required field label is unset!')
        if self.picture is None:
            raise TProtocolException(message='Required field picture is unset!')
        if self.email is None:
            raise TProtocolException(message='Required field email is unset!')
        if self.phone is None:
            raise TProtocolException(message='Required field phone is unset!')
        if self.website is None:
            raise TProtocolException(message='Required field website is unset!')
        if self.summary is None:
            raise TProtocolException(message='Required field summary is unset!')
        if self.location is None:
            raise TProtocolException(message='Required field location is unset!')
        if self.profiles is None:
            raise TProtocolException(message='Required field profiles is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Work(object):
    """
    Attributes:
     - company
     - position
     - website
     - startDate
     - endDate
     - summary
     - highlights

    """


    def __init__(self, company=None, position=None, website=None, startDate=None, endDate=None, summary=None, highlights=None,):
        self.company = company
        self.position = position
        self.website = website
        self.startDate = startDate
        self.endDate = endDate
        self.summary = summary
        self.highlights = highlights

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.company = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.position = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.website = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.startDate = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.endDate = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.summary = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.highlights = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.highlights.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Work')
        if self.company is not None:
            oprot.writeFieldBegin('company', TType.STRING, 1)
            oprot.writeString(self.company.encode('utf-8') if sys.version_info[0] == 2 else self.company)
            oprot.writeFieldEnd()
        if self.position is not None:
            oprot.writeFieldBegin('position', TType.STRING, 2)
            oprot.writeString(self.position.encode('utf-8') if sys.version_info[0] == 2 else self.position)
            oprot.writeFieldEnd()
        if self.website is not None:
            oprot.writeFieldBegin('website', TType.STRING, 3)
            oprot.writeString(self.website.encode('utf-8') if sys.version_info[0] == 2 else self.website)
            oprot.writeFieldEnd()
        if self.startDate is not None:
            oprot.writeFieldBegin('startDate', TType.STRING, 4)
            oprot.writeString(self.startDate.encode('utf-8') if sys.version_info[0] == 2 else self.startDate)
            oprot.writeFieldEnd()
        if self.endDate is not None:
            oprot.writeFieldBegin('endDate', TType.STRING, 5)
            oprot.writeString(self.endDate.encode('utf-8') if sys.version_info[0] == 2 else self.endDate)
            oprot.writeFieldEnd()
        if self.summary is not None:
            oprot.writeFieldBegin('summary', TType.STRING, 6)
            oprot.writeString(self.summary.encode('utf-8') if sys.version_info[0] == 2 else self.summary)
            oprot.writeFieldEnd()
        if self.highlights is not None:
            oprot.writeFieldBegin('highlights', TType.LIST, 7)
            oprot.writeListBegin(TType.STRING, len(self.highlights))
            for iter13 in self.highlights:
                oprot.writeString(iter13.encode('utf-8') if sys.version_info[0] == 2 else iter13)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.company is None:
            raise TProtocolException(message='Required field company is unset!')
        if self.position is None:
            raise TProtocolException(message='Required field position is unset!')
        if self.website is None:
            raise TProtocolException(message='Required field website is unset!')
        if self.startDate is None:
            raise TProtocolException(message='Required field startDate is unset!')
        if self.endDate is None:
            raise TProtocolException(message='Required field endDate is unset!')
        if self.summary is None:
            raise TProtocolException(message='Required field summary is unset!')
        if self.highlights is None:
            raise TProtocolException(message='Required field highlights is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Volunteer(object):
    """
    Attributes:
     - organization
     - position
     - website
     - startDate
     - endDate
     - summary
     - highlights

    """


    def __init__(self, organization=None, position=None, website=None, startDate=None, endDate=None, summary=None, highlights=None,):
        self.organization = organization
        self.position = position
        self.website = website
        self.startDate = startDate
        self.endDate = endDate
        self.summary = summary
        self.highlights = highlights

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.organization = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.position = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.website = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.startDate = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.endDate = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.summary = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.highlights = []
                    (_etype17, _size14) = iprot.readListBegin()
                    for _i18 in range(_size14):
                        _elem19 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.highlights.append(_elem19)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Volunteer')
        if self.organization is not None:
            oprot.writeFieldBegin('organization', TType.STRING, 1)
            oprot.writeString(self.organization.encode('utf-8') if sys.version_info[0] == 2 else self.organization)
            oprot.writeFieldEnd()
        if self.position is not None:
            oprot.writeFieldBegin('position', TType.STRING, 2)
            oprot.writeString(self.position.encode('utf-8') if sys.version_info[0] == 2 else self.position)
            oprot.writeFieldEnd()
        if self.website is not None:
            oprot.writeFieldBegin('website', TType.STRING, 3)
            oprot.writeString(self.website.encode('utf-8') if sys.version_info[0] == 2 else self.website)
            oprot.writeFieldEnd()
        if self.startDate is not None:
            oprot.writeFieldBegin('startDate', TType.STRING, 4)
            oprot.writeString(self.startDate.encode('utf-8') if sys.version_info[0] == 2 else self.startDate)
            oprot.writeFieldEnd()
        if self.endDate is not None:
            oprot.writeFieldBegin('endDate', TType.STRING, 5)
            oprot.writeString(self.endDate.encode('utf-8') if sys.version_info[0] == 2 else self.endDate)
            oprot.writeFieldEnd()
        if self.summary is not None:
            oprot.writeFieldBegin('summary', TType.STRING, 6)
            oprot.writeString(self.summary.encode('utf-8') if sys.version_info[0] == 2 else self.summary)
            oprot.writeFieldEnd()
        if self.highlights is not None:
            oprot.writeFieldBegin('highlights', TType.LIST, 7)
            oprot.writeListBegin(TType.STRING, len(self.highlights))
            for iter20 in self.highlights:
                oprot.writeString(iter20.encode('utf-8') if sys.version_info[0] == 2 else iter20)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.organization is None:
            raise TProtocolException(message='Required field organization is unset!')
        if self.position is None:
            raise TProtocolException(message='Required field position is unset!')
        if self.website is None:
            raise TProtocolException(message='Required field website is unset!')
        if self.startDate is None:
            raise TProtocolException(message='Required field startDate is unset!')
        if self.endDate is None:
            raise TProtocolException(message='Required field endDate is unset!')
        if self.summary is None:
            raise TProtocolException(message='Required field summary is unset!')
        if self.highlights is None:
            raise TProtocolException(message='Required field highlights is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Education(object):
    """
    Attributes:
     - institution
     - area
     - studyType
     - startDate
     - endDate
     - gpa
     - courses

    """


    def __init__(self, institution=None, area=None, studyType=None, startDate=None, endDate=None, gpa=None, courses=None,):
        self.institution = institution
        self.area = area
        self.studyType = studyType
        self.startDate = startDate
        self.endDate = endDate
        self.gpa = gpa
        self.courses = courses

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.institution = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.area = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.studyType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.startDate = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.endDate = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.gpa = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.courses = []
                    (_etype24, _size21) = iprot.readListBegin()
                    for _i25 in range(_size21):
                        _elem26 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.courses.append(_elem26)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Education')
        if self.institution is not None:
            oprot.writeFieldBegin('institution', TType.STRING, 1)
            oprot.writeString(self.institution.encode('utf-8') if sys.version_info[0] == 2 else self.institution)
            oprot.writeFieldEnd()
        if self.area is not None:
            oprot.writeFieldBegin('area', TType.STRING, 2)
            oprot.writeString(self.area.encode('utf-8') if sys.version_info[0] == 2 else self.area)
            oprot.writeFieldEnd()
        if self.studyType is not None:
            oprot.writeFieldBegin('studyType', TType.STRING, 3)
            oprot.writeString(self.studyType.encode('utf-8') if sys.version_info[0] == 2 else self.studyType)
            oprot.writeFieldEnd()
        if self.startDate is not None:
            oprot.writeFieldBegin('startDate', TType.STRING, 4)
            oprot.writeString(self.startDate.encode('utf-8') if sys.version_info[0] == 2 else self.startDate)
            oprot.writeFieldEnd()
        if self.endDate is not None:
            oprot.writeFieldBegin('endDate', TType.STRING, 5)
            oprot.writeString(self.endDate.encode('utf-8') if sys.version_info[0] == 2 else self.endDate)
            oprot.writeFieldEnd()
        if self.gpa is not None:
            oprot.writeFieldBegin('gpa', TType.STRING, 6)
            oprot.writeString(self.gpa.encode('utf-8') if sys.version_info[0] == 2 else self.gpa)
            oprot.writeFieldEnd()
        if self.courses is not None:
            oprot.writeFieldBegin('courses', TType.LIST, 7)
            oprot.writeListBegin(TType.STRING, len(self.courses))
            for iter27 in self.courses:
                oprot.writeString(iter27.encode('utf-8') if sys.version_info[0] == 2 else iter27)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.institution is None:
            raise TProtocolException(message='Required field institution is unset!')
        if self.area is None:
            raise TProtocolException(message='Required field area is unset!')
        if self.studyType is None:
            raise TProtocolException(message='Required field studyType is unset!')
        if self.startDate is None:
            raise TProtocolException(message='Required field startDate is unset!')
        if self.endDate is None:
            raise TProtocolException(message='Required field endDate is unset!')
        if self.gpa is None:
            raise TProtocolException(message='Required field gpa is unset!')
        if self.courses is None:
            raise TProtocolException(message='Required field courses is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Award(object):
    """
    Attributes:
     - title
     - date
     - awarder
     - summary

    """


    def __init__(self, title=None, date=None, awarder=None, summary=None,):
        self.title = title
        self.date = date
        self.awarder = awarder
        self.summary = summary

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.title = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.date = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.awarder = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.summary = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Award')
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 1)
            oprot.writeString(self.title.encode('utf-8') if sys.version_info[0] == 2 else self.title)
            oprot.writeFieldEnd()
        if self.date is not None:
            oprot.writeFieldBegin('date', TType.STRING, 2)
            oprot.writeString(self.date.encode('utf-8') if sys.version_info[0] == 2 else self.date)
            oprot.writeFieldEnd()
        if self.awarder is not None:
            oprot.writeFieldBegin('awarder', TType.STRING, 3)
            oprot.writeString(self.awarder.encode('utf-8') if sys.version_info[0] == 2 else self.awarder)
            oprot.writeFieldEnd()
        if self.summary is not None:
            oprot.writeFieldBegin('summary', TType.STRING, 4)
            oprot.writeString(self.summary.encode('utf-8') if sys.version_info[0] == 2 else self.summary)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.title is None:
            raise TProtocolException(message='Required field title is unset!')
        if self.date is None:
            raise TProtocolException(message='Required field date is unset!')
        if self.awarder is None:
            raise TProtocolException(message='Required field awarder is unset!')
        if self.summary is None:
            raise TProtocolException(message='Required field summary is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Publication(object):
    """
    Attributes:
     - name
     - publisher
     - releaseDate
     - website
     - summary

    """


    def __init__(self, name=None, publisher=None, releaseDate=None, website=None, summary=None,):
        self.name = name
        self.publisher = publisher
        self.releaseDate = releaseDate
        self.website = website
        self.summary = summary

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.publisher = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.releaseDate = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.website = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.summary = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Publication')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.publisher is not None:
            oprot.writeFieldBegin('publisher', TType.STRING, 2)
            oprot.writeString(self.publisher.encode('utf-8') if sys.version_info[0] == 2 else self.publisher)
            oprot.writeFieldEnd()
        if self.releaseDate is not None:
            oprot.writeFieldBegin('releaseDate', TType.STRING, 3)
            oprot.writeString(self.releaseDate.encode('utf-8') if sys.version_info[0] == 2 else self.releaseDate)
            oprot.writeFieldEnd()
        if self.website is not None:
            oprot.writeFieldBegin('website', TType.STRING, 4)
            oprot.writeString(self.website.encode('utf-8') if sys.version_info[0] == 2 else self.website)
            oprot.writeFieldEnd()
        if self.summary is not None:
            oprot.writeFieldBegin('summary', TType.STRING, 5)
            oprot.writeString(self.summary.encode('utf-8') if sys.version_info[0] == 2 else self.summary)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.name is None:
            raise TProtocolException(message='Required field name is unset!')
        if self.publisher is None:
            raise TProtocolException(message='Required field publisher is unset!')
        if self.releaseDate is None:
            raise TProtocolException(message='Required field releaseDate is unset!')
        if self.website is None:
            raise TProtocolException(message='Required field website is unset!')
        if self.summary is None:
            raise TProtocolException(message='Required field summary is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Skill(object):
    """
    Attributes:
     - name
     - level
     - keywords

    """


    def __init__(self, name=None, level=None, keywords=None,):
        self.name = name
        self.level = level
        self.keywords = keywords

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.level = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.keywords = []
                    (_etype31, _size28) = iprot.readListBegin()
                    for _i32 in range(_size28):
                        _elem33 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.keywords.append(_elem33)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Skill')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.level is not None:
            oprot.writeFieldBegin('level', TType.STRING, 2)
            oprot.writeString(self.level.encode('utf-8') if sys.version_info[0] == 2 else self.level)
            oprot.writeFieldEnd()
        if self.keywords is not None:
            oprot.writeFieldBegin('keywords', TType.LIST, 3)
            oprot.writeListBegin(TType.STRING, len(self.keywords))
            for iter34 in self.keywords:
                oprot.writeString(iter34.encode('utf-8') if sys.version_info[0] == 2 else iter34)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.name is None:
            raise TProtocolException(message='Required field name is unset!')
        if self.level is None:
            raise TProtocolException(message='Required field level is unset!')
        if self.keywords is None:
            raise TProtocolException(message='Required field keywords is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Language(object):
    """
    Attributes:
     - language
     - fluency

    """


    def __init__(self, language=None, fluency=None,):
        self.language = language
        self.fluency = fluency

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.language = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.fluency = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Language')
        if self.language is not None:
            oprot.writeFieldBegin('language', TType.STRING, 1)
            oprot.writeString(self.language.encode('utf-8') if sys.version_info[0] == 2 else self.language)
            oprot.writeFieldEnd()
        if self.fluency is not None:
            oprot.writeFieldBegin('fluency', TType.STRING, 2)
            oprot.writeString(self.fluency.encode('utf-8') if sys.version_info[0] == 2 else self.fluency)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.language is None:
            raise TProtocolException(message='Required field language is unset!')
        if self.fluency is None:
            raise TProtocolException(message='Required field fluency is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Interest(object):
    """
    Attributes:
     - name
     - keywords

    """


    def __init__(self, name=None, keywords=None,):
        self.name = name
        self.keywords = keywords

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.keywords = []
                    (_etype38, _size35) = iprot.readListBegin()
                    for _i39 in range(_size35):
                        _elem40 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.keywords.append(_elem40)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Interest')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.keywords is not None:
            oprot.writeFieldBegin('keywords', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.keywords))
            for iter41 in self.keywords:
                oprot.writeString(iter41.encode('utf-8') if sys.version_info[0] == 2 else iter41)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.name is None:
            raise TProtocolException(message='Required field name is unset!')
        if self.keywords is None:
            raise TProtocolException(message='Required field keywords is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Reference(object):
    """
    Attributes:
     - name
     - reference

    """


    def __init__(self, name=None, reference=None,):
        self.name = name
        self.reference = reference

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.reference = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Reference')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.reference is not None:
            oprot.writeFieldBegin('reference', TType.STRING, 2)
            oprot.writeString(self.reference.encode('utf-8') if sys.version_info[0] == 2 else self.reference)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.name is None:
            raise TProtocolException(message='Required field name is unset!')
        if self.reference is None:
            raise TProtocolException(message='Required field reference is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Main(object):
    """
    Attributes:
     - basics
     - work
     - volunteer
     - education
     - awards
     - publications
     - skills
     - languages
     - interests
     - references

    """


    def __init__(self, basics=None, work=None, volunteer=None, education=None, awards=None, publications=None, skills=None, languages=None, interests=None, references=None,):
        self.basics = basics
        self.work = work
        self.volunteer = volunteer
        self.education = education
        self.awards = awards
        self.publications = publications
        self.skills = skills
        self.languages = languages
        self.interests = interests
        self.references = references

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.basics = Basics()
                    self.basics.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.work = []
                    (_etype45, _size42) = iprot.readListBegin()
                    for _i46 in range(_size42):
                        _elem47 = Work()
                        _elem47.read(iprot)
                        self.work.append(_elem47)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.volunteer = []
                    (_etype51, _size48) = iprot.readListBegin()
                    for _i52 in range(_size48):
                        _elem53 = Volunteer()
                        _elem53.read(iprot)
                        self.volunteer.append(_elem53)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.education = []
                    (_etype57, _size54) = iprot.readListBegin()
                    for _i58 in range(_size54):
                        _elem59 = Education()
                        _elem59.read(iprot)
                        self.education.append(_elem59)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.awards = []
                    (_etype63, _size60) = iprot.readListBegin()
                    for _i64 in range(_size60):
                        _elem65 = Award()
                        _elem65.read(iprot)
                        self.awards.append(_elem65)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.publications = []
                    (_etype69, _size66) = iprot.readListBegin()
                    for _i70 in range(_size66):
                        _elem71 = Publication()
                        _elem71.read(iprot)
                        self.publications.append(_elem71)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.skills = []
                    (_etype75, _size72) = iprot.readListBegin()
                    for _i76 in range(_size72):
                        _elem77 = Skill()
                        _elem77.read(iprot)
                        self.skills.append(_elem77)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.LIST:
                    self.languages = []
                    (_etype81, _size78) = iprot.readListBegin()
                    for _i82 in range(_size78):
                        _elem83 = Language()
                        _elem83.read(iprot)
                        self.languages.append(_elem83)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.LIST:
                    self.interests = []
                    (_etype87, _size84) = iprot.readListBegin()
                    for _i88 in range(_size84):
                        _elem89 = Interest()
                        _elem89.read(iprot)
                        self.interests.append(_elem89)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.LIST:
                    self.references = []
                    (_etype93, _size90) = iprot.readListBegin()
                    for _i94 in range(_size90):
                        _elem95 = Reference()
                        _elem95.read(iprot)
                        self.references.append(_elem95)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Main')
        if self.basics is not None:
            oprot.writeFieldBegin('basics', TType.STRUCT, 1)
            self.basics.write(oprot)
            oprot.writeFieldEnd()
        if self.work is not None:
            oprot.writeFieldBegin('work', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.work))
            for iter96 in self.work:
                iter96.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.volunteer is not None:
            oprot.writeFieldBegin('volunteer', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.volunteer))
            for iter97 in self.volunteer:
                iter97.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.education is not None:
            oprot.writeFieldBegin('education', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.education))
            for iter98 in self.education:
                iter98.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.awards is not None:
            oprot.writeFieldBegin('awards', TType.LIST, 5)
            oprot.writeListBegin(TType.STRUCT, len(self.awards))
            for iter99 in self.awards:
                iter99.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.publications is not None:
            oprot.writeFieldBegin('publications', TType.LIST, 6)
            oprot.writeListBegin(TType.STRUCT, len(self.publications))
            for iter100 in self.publications:
                iter100.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.skills is not None:
            oprot.writeFieldBegin('skills', TType.LIST, 7)
            oprot.writeListBegin(TType.STRUCT, len(self.skills))
            for iter101 in self.skills:
                iter101.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.languages is not None:
            oprot.writeFieldBegin('languages', TType.LIST, 8)
            oprot.writeListBegin(TType.STRUCT, len(self.languages))
            for iter102 in self.languages:
                iter102.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.interests is not None:
            oprot.writeFieldBegin('interests', TType.LIST, 9)
            oprot.writeListBegin(TType.STRUCT, len(self.interests))
            for iter103 in self.interests:
                iter103.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.references is not None:
            oprot.writeFieldBegin('references', TType.LIST, 10)
            oprot.writeListBegin(TType.STRUCT, len(self.references))
            for iter104 in self.references:
                iter104.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.basics is None:
            raise TProtocolException(message='Required field basics is unset!')
        if self.work is None:
            raise TProtocolException(message='Required field work is unset!')
        if self.volunteer is None:
            raise TProtocolException(message='Required field volunteer is unset!')
        if self.education is None:
            raise TProtocolException(message='Required field education is unset!')
        if self.awards is None:
            raise TProtocolException(message='Required field awards is unset!')
        if self.publications is None:
            raise TProtocolException(message='Required field publications is unset!')
        if self.skills is None:
            raise TProtocolException(message='Required field skills is unset!')
        if self.languages is None:
            raise TProtocolException(message='Required field languages is unset!')
        if self.interests is None:
            raise TProtocolException(message='Required field interests is unset!')
        if self.references is None:
            raise TProtocolException(message='Required field references is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(Location)
Location.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'address', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'postalCode', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'city', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'countryCode', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'region', 'UTF8', None, ),  # 5
)
all_structs.append(Profile)
Profile.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'network', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'username', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'url', 'UTF8', None, ),  # 3
)
all_structs.append(Basics)
Basics.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'label', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'picture', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'email', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'phone', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'website', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'summary', 'UTF8', None, ),  # 7
    (8, TType.STRUCT, 'location', [Location, None], None, ),  # 8
    (9, TType.LIST, 'profiles', (TType.STRUCT, [Profile, None], False), None, ),  # 9
)
all_structs.append(Work)
Work.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'company', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'position', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'website', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'startDate', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'endDate', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'summary', 'UTF8', None, ),  # 6
    (7, TType.LIST, 'highlights', (TType.STRING, 'UTF8', False), None, ),  # 7
)
all_structs.append(Volunteer)
Volunteer.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'organization', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'position', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'website', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'startDate', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'endDate', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'summary', 'UTF8', None, ),  # 6
    (7, TType.LIST, 'highlights', (TType.STRING, 'UTF8', False), None, ),  # 7
)
all_structs.append(Education)
Education.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'institution', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'area', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'studyType', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'startDate', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'endDate', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'gpa', 'UTF8', None, ),  # 6
    (7, TType.LIST, 'courses', (TType.STRING, 'UTF8', False), None, ),  # 7
)
all_structs.append(Award)
Award.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'title', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'date', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'awarder', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'summary', 'UTF8', None, ),  # 4
)
all_structs.append(Publication)
Publication.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'publisher', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'releaseDate', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'website', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'summary', 'UTF8', None, ),  # 5
)
all_structs.append(Skill)
Skill.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'level', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'keywords', (TType.STRING, 'UTF8', False), None, ),  # 3
)
all_structs.append(Language)
Language.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'language', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'fluency', 'UTF8', None, ),  # 2
)
all_structs.append(Interest)
Interest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'keywords', (TType.STRING, 'UTF8', False), None, ),  # 2
)
all_structs.append(Reference)
Reference.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'reference', 'UTF8', None, ),  # 2
)
all_structs.append(Main)
Main.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'basics', [Basics, None], None, ),  # 1
    (2, TType.LIST, 'work', (TType.STRUCT, [Work, None], False), None, ),  # 2
    (3, TType.LIST, 'volunteer', (TType.STRUCT, [Volunteer, None], False), None, ),  # 3
    (4, TType.LIST, 'education', (TType.STRUCT, [Education, None], False), None, ),  # 4
    (5, TType.LIST, 'awards', (TType.STRUCT, [Award, None], False), None, ),  # 5
    (6, TType.LIST, 'publications', (TType.STRUCT, [Publication, None], False), None, ),  # 6
    (7, TType.LIST, 'skills', (TType.STRUCT, [Skill, None], False), None, ),  # 7
    (8, TType.LIST, 'languages', (TType.STRUCT, [Language, None], False), None, ),  # 8
    (9, TType.LIST, 'interests', (TType.STRUCT, [Interest, None], False), None, ),  # 9
    (10, TType.LIST, 'references', (TType.STRUCT, [Reference, None], False), None, ),  # 10
)
fix_spec(all_structs)
del all_structs
