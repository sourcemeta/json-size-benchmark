#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class Main(object):
    """
    Attributes:
     - cjs
     - mainFields
     - mode
     - force
     - cache
     - sourceMap

    """


    def __init__(self, cjs=None, mainFields=None, mode=None, force=None, cache=None, sourceMap=None,):
        self.cjs = cjs
        self.mainFields = mainFields
        self.mode = mode
        self.force = force
        self.cache = cache
        self.sourceMap = sourceMap

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.cjs = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.mainFields = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.mainFields.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.mode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.force = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.cache = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.sourceMap = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Main')
        if self.cjs is not None:
            oprot.writeFieldBegin('cjs', TType.BOOL, 1)
            oprot.writeBool(self.cjs)
            oprot.writeFieldEnd()
        if self.mainFields is not None:
            oprot.writeFieldBegin('mainFields', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.mainFields))
            for iter6 in self.mainFields:
                oprot.writeString(iter6.encode('utf-8') if sys.version_info[0] == 2 else iter6)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.mode is not None:
            oprot.writeFieldBegin('mode', TType.STRING, 3)
            oprot.writeString(self.mode.encode('utf-8') if sys.version_info[0] == 2 else self.mode)
            oprot.writeFieldEnd()
        if self.force is not None:
            oprot.writeFieldBegin('force', TType.BOOL, 4)
            oprot.writeBool(self.force)
            oprot.writeFieldEnd()
        if self.cache is not None:
            oprot.writeFieldBegin('cache', TType.BOOL, 5)
            oprot.writeBool(self.cache)
            oprot.writeFieldEnd()
        if self.sourceMap is not None:
            oprot.writeFieldBegin('sourceMap', TType.BOOL, 6)
            oprot.writeBool(self.sourceMap)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.cjs is None:
            raise TProtocolException(message='Required field cjs is unset!')
        if self.mainFields is None:
            raise TProtocolException(message='Required field mainFields is unset!')
        if self.mode is None:
            raise TProtocolException(message='Required field mode is unset!')
        if self.force is None:
            raise TProtocolException(message='Required field force is unset!')
        if self.cache is None:
            raise TProtocolException(message='Required field cache is unset!')
        if self.sourceMap is None:
            raise TProtocolException(message='Required field sourceMap is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(Main)
Main.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'cjs', None, None, ),  # 1
    (2, TType.LIST, 'mainFields', (TType.STRING, 'UTF8', False), None, ),  # 2
    (3, TType.STRING, 'mode', 'UTF8', None, ),  # 3
    (4, TType.BOOL, 'force', None, None, ),  # 4
    (5, TType.BOOL, 'cache', None, None, ),  # 5
    (6, TType.BOOL, 'sourceMap', None, None, ),  # 6
)
fix_spec(all_structs)
del all_structs
