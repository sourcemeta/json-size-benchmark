#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class Rule(object):
    """
    Attributes:
     - path
     - regex
     - types
     - allowData

    """


    def __init__(self, path=None, regex=None, types=None, allowData=None,):
        self.path = path
        self.regex = regex
        self.types = types
        self.allowData = allowData

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.path = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.regex = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.types = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.types.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.allowData = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Rule')
        if self.path is not None:
            oprot.writeFieldBegin('path', TType.STRING, 1)
            oprot.writeString(self.path.encode('utf-8') if sys.version_info[0] == 2 else self.path)
            oprot.writeFieldEnd()
        if self.regex is not None:
            oprot.writeFieldBegin('regex', TType.STRING, 2)
            oprot.writeString(self.regex.encode('utf-8') if sys.version_info[0] == 2 else self.regex)
            oprot.writeFieldEnd()
        if self.types is not None:
            oprot.writeFieldBegin('types', TType.LIST, 3)
            oprot.writeListBegin(TType.STRING, len(self.types))
            for iter6 in self.types:
                oprot.writeString(iter6.encode('utf-8') if sys.version_info[0] == 2 else iter6)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.allowData is not None:
            oprot.writeFieldBegin('allowData', TType.BOOL, 4)
            oprot.writeBool(self.allowData)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.types is None:
            raise TProtocolException(message='Required field types is unset!')
        if self.allowData is None:
            raise TProtocolException(message='Required field allowData is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Main(object):
    """
    Attributes:
     - site
     - maxAge
     - reportUrl
     - defaultNavBehavior
     - defaultResBehavior
     - rules

    """


    def __init__(self, site=None, maxAge=None, reportUrl=None, defaultNavBehavior=None, defaultResBehavior=None, rules=None,):
        self.site = site
        self.maxAge = maxAge
        self.reportUrl = reportUrl
        self.defaultNavBehavior = defaultNavBehavior
        self.defaultResBehavior = defaultResBehavior
        self.rules = rules

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.site = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.maxAge = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.reportUrl = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.defaultNavBehavior = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.defaultResBehavior = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.rules = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = Rule()
                        _elem12.read(iprot)
                        self.rules.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Main')
        if self.site is not None:
            oprot.writeFieldBegin('site', TType.STRING, 1)
            oprot.writeString(self.site.encode('utf-8') if sys.version_info[0] == 2 else self.site)
            oprot.writeFieldEnd()
        if self.maxAge is not None:
            oprot.writeFieldBegin('maxAge', TType.I32, 2)
            oprot.writeI32(self.maxAge)
            oprot.writeFieldEnd()
        if self.reportUrl is not None:
            oprot.writeFieldBegin('reportUrl', TType.STRING, 3)
            oprot.writeString(self.reportUrl.encode('utf-8') if sys.version_info[0] == 2 else self.reportUrl)
            oprot.writeFieldEnd()
        if self.defaultNavBehavior is not None:
            oprot.writeFieldBegin('defaultNavBehavior', TType.STRING, 4)
            oprot.writeString(self.defaultNavBehavior.encode('utf-8') if sys.version_info[0] == 2 else self.defaultNavBehavior)
            oprot.writeFieldEnd()
        if self.defaultResBehavior is not None:
            oprot.writeFieldBegin('defaultResBehavior', TType.STRING, 5)
            oprot.writeString(self.defaultResBehavior.encode('utf-8') if sys.version_info[0] == 2 else self.defaultResBehavior)
            oprot.writeFieldEnd()
        if self.rules is not None:
            oprot.writeFieldBegin('rules', TType.LIST, 6)
            oprot.writeListBegin(TType.STRUCT, len(self.rules))
            for iter13 in self.rules:
                iter13.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.site is None:
            raise TProtocolException(message='Required field site is unset!')
        if self.maxAge is None:
            raise TProtocolException(message='Required field maxAge is unset!')
        if self.reportUrl is None:
            raise TProtocolException(message='Required field reportUrl is unset!')
        if self.defaultNavBehavior is None:
            raise TProtocolException(message='Required field defaultNavBehavior is unset!')
        if self.defaultResBehavior is None:
            raise TProtocolException(message='Required field defaultResBehavior is unset!')
        if self.rules is None:
            raise TProtocolException(message='Required field rules is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(Rule)
Rule.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'path', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'regex', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'types', (TType.STRING, 'UTF8', False), None, ),  # 3
    (4, TType.BOOL, 'allowData', None, None, ),  # 4
)
all_structs.append(Main)
Main.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'site', 'UTF8', None, ),  # 1
    (2, TType.I32, 'maxAge', None, None, ),  # 2
    (3, TType.STRING, 'reportUrl', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'defaultNavBehavior', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'defaultResBehavior', 'UTF8', None, ),  # 5
    (6, TType.LIST, 'rules', (TType.STRUCT, [Rule, None], False), None, ),  # 6
)
fix_spec(all_structs)
del all_structs
