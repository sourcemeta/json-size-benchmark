#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class CompilationOptions(object):
    """
    Attributes:
     - warningsAsErrors

    """


    def __init__(self, warningsAsErrors=None,):
        self.warningsAsErrors = warningsAsErrors

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.warningsAsErrors = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('CompilationOptions')
        if self.warningsAsErrors is not None:
            oprot.writeFieldBegin('warningsAsErrors', TType.BOOL, 1)
            oprot.writeBool(self.warningsAsErrors)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.warningsAsErrors is None:
            raise TProtocolException(message='Required field warningsAsErrors is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Dependencies(object):
    """
    Attributes:
     - microsoftBclImmutable
     - microsoftAspNetConfigurationModel
     - microsoftAspNetDependencyInjection
     - microsoftAspNetLogging
     - systemDataCommon

    """


    def __init__(self, microsoftBclImmutable=None, microsoftAspNetConfigurationModel=None, microsoftAspNetDependencyInjection=None, microsoftAspNetLogging=None, systemDataCommon=None,):
        self.microsoftBclImmutable = microsoftBclImmutable
        self.microsoftAspNetConfigurationModel = microsoftAspNetConfigurationModel
        self.microsoftAspNetDependencyInjection = microsoftAspNetDependencyInjection
        self.microsoftAspNetLogging = microsoftAspNetLogging
        self.systemDataCommon = systemDataCommon

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.microsoftBclImmutable = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.microsoftAspNetConfigurationModel = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.microsoftAspNetDependencyInjection = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.microsoftAspNetLogging = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.systemDataCommon = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Dependencies')
        if self.microsoftBclImmutable is not None:
            oprot.writeFieldBegin('microsoftBclImmutable', TType.STRING, 1)
            oprot.writeString(self.microsoftBclImmutable.encode('utf-8') if sys.version_info[0] == 2 else self.microsoftBclImmutable)
            oprot.writeFieldEnd()
        if self.microsoftAspNetConfigurationModel is not None:
            oprot.writeFieldBegin('microsoftAspNetConfigurationModel', TType.STRING, 2)
            oprot.writeString(self.microsoftAspNetConfigurationModel.encode('utf-8') if sys.version_info[0] == 2 else self.microsoftAspNetConfigurationModel)
            oprot.writeFieldEnd()
        if self.microsoftAspNetDependencyInjection is not None:
            oprot.writeFieldBegin('microsoftAspNetDependencyInjection', TType.STRING, 3)
            oprot.writeString(self.microsoftAspNetDependencyInjection.encode('utf-8') if sys.version_info[0] == 2 else self.microsoftAspNetDependencyInjection)
            oprot.writeFieldEnd()
        if self.microsoftAspNetLogging is not None:
            oprot.writeFieldBegin('microsoftAspNetLogging', TType.STRING, 4)
            oprot.writeString(self.microsoftAspNetLogging.encode('utf-8') if sys.version_info[0] == 2 else self.microsoftAspNetLogging)
            oprot.writeFieldEnd()
        if self.systemDataCommon is not None:
            oprot.writeFieldBegin('systemDataCommon', TType.STRING, 5)
            oprot.writeString(self.systemDataCommon.encode('utf-8') if sys.version_info[0] == 2 else self.systemDataCommon)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.microsoftBclImmutable is None:
            raise TProtocolException(message='Required field microsoftBclImmutable is unset!')
        if self.microsoftAspNetConfigurationModel is None:
            raise TProtocolException(message='Required field microsoftAspNetConfigurationModel is unset!')
        if self.microsoftAspNetDependencyInjection is None:
            raise TProtocolException(message='Required field microsoftAspNetDependencyInjection is unset!')
        if self.microsoftAspNetLogging is None:
            raise TProtocolException(message='Required field microsoftAspNetLogging is unset!')
        if self.systemDataCommon is None:
            raise TProtocolException(message='Required field systemDataCommon is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Net45Dependencies(object):
    """
    Attributes:
     - systemRuntime
     - systemCollections

    """


    def __init__(self, systemRuntime=None, systemCollections=None,):
        self.systemRuntime = systemRuntime
        self.systemCollections = systemCollections

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.systemRuntime = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.systemCollections = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Net45Dependencies')
        if self.systemRuntime is not None:
            oprot.writeFieldBegin('systemRuntime', TType.STRING, 1)
            oprot.writeString(self.systemRuntime.encode('utf-8') if sys.version_info[0] == 2 else self.systemRuntime)
            oprot.writeFieldEnd()
        if self.systemCollections is not None:
            oprot.writeFieldBegin('systemCollections', TType.STRING, 2)
            oprot.writeString(self.systemCollections.encode('utf-8') if sys.version_info[0] == 2 else self.systemCollections)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.systemRuntime is None:
            raise TProtocolException(message='Required field systemRuntime is unset!')
        if self.systemCollections is None:
            raise TProtocolException(message='Required field systemCollections is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class K10Dependencies(object):
    """
    Attributes:
     - systemCollections
     - systemCollectionsConcurrent
     - systemComponentModel
     - systemConsole
     - systemDiagnosticsContracts
     - systemDiagnosticsDebug
     - systemGlobalization
     - systemLinq
     - systemLinqExpressions
     - systemLinqQueryable
     - systemReflection
     - systemReflectionExtensions
     - systemResourcesResourceManager
     - systemRuntime
     - systemRuntimeExtensions
     - systemThreading
     - systemThreadingTasks

    """


    def __init__(self, systemCollections=None, systemCollectionsConcurrent=None, systemComponentModel=None, systemConsole=None, systemDiagnosticsContracts=None, systemDiagnosticsDebug=None, systemGlobalization=None, systemLinq=None, systemLinqExpressions=None, systemLinqQueryable=None, systemReflection=None, systemReflectionExtensions=None, systemResourcesResourceManager=None, systemRuntime=None, systemRuntimeExtensions=None, systemThreading=None, systemThreadingTasks=None,):
        self.systemCollections = systemCollections
        self.systemCollectionsConcurrent = systemCollectionsConcurrent
        self.systemComponentModel = systemComponentModel
        self.systemConsole = systemConsole
        self.systemDiagnosticsContracts = systemDiagnosticsContracts
        self.systemDiagnosticsDebug = systemDiagnosticsDebug
        self.systemGlobalization = systemGlobalization
        self.systemLinq = systemLinq
        self.systemLinqExpressions = systemLinqExpressions
        self.systemLinqQueryable = systemLinqQueryable
        self.systemReflection = systemReflection
        self.systemReflectionExtensions = systemReflectionExtensions
        self.systemResourcesResourceManager = systemResourcesResourceManager
        self.systemRuntime = systemRuntime
        self.systemRuntimeExtensions = systemRuntimeExtensions
        self.systemThreading = systemThreading
        self.systemThreadingTasks = systemThreadingTasks

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.systemCollections = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.systemCollectionsConcurrent = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.systemComponentModel = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.systemConsole = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.systemDiagnosticsContracts = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.systemDiagnosticsDebug = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.systemGlobalization = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.systemLinq = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.systemLinqExpressions = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.systemLinqQueryable = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.systemReflection = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.systemReflectionExtensions = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.systemResourcesResourceManager = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.systemRuntime = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRING:
                    self.systemRuntimeExtensions = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.STRING:
                    self.systemThreading = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.STRING:
                    self.systemThreadingTasks = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('K10Dependencies')
        if self.systemCollections is not None:
            oprot.writeFieldBegin('systemCollections', TType.STRING, 1)
            oprot.writeString(self.systemCollections.encode('utf-8') if sys.version_info[0] == 2 else self.systemCollections)
            oprot.writeFieldEnd()
        if self.systemCollectionsConcurrent is not None:
            oprot.writeFieldBegin('systemCollectionsConcurrent', TType.STRING, 2)
            oprot.writeString(self.systemCollectionsConcurrent.encode('utf-8') if sys.version_info[0] == 2 else self.systemCollectionsConcurrent)
            oprot.writeFieldEnd()
        if self.systemComponentModel is not None:
            oprot.writeFieldBegin('systemComponentModel', TType.STRING, 3)
            oprot.writeString(self.systemComponentModel.encode('utf-8') if sys.version_info[0] == 2 else self.systemComponentModel)
            oprot.writeFieldEnd()
        if self.systemConsole is not None:
            oprot.writeFieldBegin('systemConsole', TType.STRING, 4)
            oprot.writeString(self.systemConsole.encode('utf-8') if sys.version_info[0] == 2 else self.systemConsole)
            oprot.writeFieldEnd()
        if self.systemDiagnosticsContracts is not None:
            oprot.writeFieldBegin('systemDiagnosticsContracts', TType.STRING, 5)
            oprot.writeString(self.systemDiagnosticsContracts.encode('utf-8') if sys.version_info[0] == 2 else self.systemDiagnosticsContracts)
            oprot.writeFieldEnd()
        if self.systemDiagnosticsDebug is not None:
            oprot.writeFieldBegin('systemDiagnosticsDebug', TType.STRING, 6)
            oprot.writeString(self.systemDiagnosticsDebug.encode('utf-8') if sys.version_info[0] == 2 else self.systemDiagnosticsDebug)
            oprot.writeFieldEnd()
        if self.systemGlobalization is not None:
            oprot.writeFieldBegin('systemGlobalization', TType.STRING, 7)
            oprot.writeString(self.systemGlobalization.encode('utf-8') if sys.version_info[0] == 2 else self.systemGlobalization)
            oprot.writeFieldEnd()
        if self.systemLinq is not None:
            oprot.writeFieldBegin('systemLinq', TType.STRING, 8)
            oprot.writeString(self.systemLinq.encode('utf-8') if sys.version_info[0] == 2 else self.systemLinq)
            oprot.writeFieldEnd()
        if self.systemLinqExpressions is not None:
            oprot.writeFieldBegin('systemLinqExpressions', TType.STRING, 9)
            oprot.writeString(self.systemLinqExpressions.encode('utf-8') if sys.version_info[0] == 2 else self.systemLinqExpressions)
            oprot.writeFieldEnd()
        if self.systemLinqQueryable is not None:
            oprot.writeFieldBegin('systemLinqQueryable', TType.STRING, 10)
            oprot.writeString(self.systemLinqQueryable.encode('utf-8') if sys.version_info[0] == 2 else self.systemLinqQueryable)
            oprot.writeFieldEnd()
        if self.systemReflection is not None:
            oprot.writeFieldBegin('systemReflection', TType.STRING, 11)
            oprot.writeString(self.systemReflection.encode('utf-8') if sys.version_info[0] == 2 else self.systemReflection)
            oprot.writeFieldEnd()
        if self.systemReflectionExtensions is not None:
            oprot.writeFieldBegin('systemReflectionExtensions', TType.STRING, 12)
            oprot.writeString(self.systemReflectionExtensions.encode('utf-8') if sys.version_info[0] == 2 else self.systemReflectionExtensions)
            oprot.writeFieldEnd()
        if self.systemResourcesResourceManager is not None:
            oprot.writeFieldBegin('systemResourcesResourceManager', TType.STRING, 13)
            oprot.writeString(self.systemResourcesResourceManager.encode('utf-8') if sys.version_info[0] == 2 else self.systemResourcesResourceManager)
            oprot.writeFieldEnd()
        if self.systemRuntime is not None:
            oprot.writeFieldBegin('systemRuntime', TType.STRING, 14)
            oprot.writeString(self.systemRuntime.encode('utf-8') if sys.version_info[0] == 2 else self.systemRuntime)
            oprot.writeFieldEnd()
        if self.systemRuntimeExtensions is not None:
            oprot.writeFieldBegin('systemRuntimeExtensions', TType.STRING, 15)
            oprot.writeString(self.systemRuntimeExtensions.encode('utf-8') if sys.version_info[0] == 2 else self.systemRuntimeExtensions)
            oprot.writeFieldEnd()
        if self.systemThreading is not None:
            oprot.writeFieldBegin('systemThreading', TType.STRING, 16)
            oprot.writeString(self.systemThreading.encode('utf-8') if sys.version_info[0] == 2 else self.systemThreading)
            oprot.writeFieldEnd()
        if self.systemThreadingTasks is not None:
            oprot.writeFieldBegin('systemThreadingTasks', TType.STRING, 17)
            oprot.writeString(self.systemThreadingTasks.encode('utf-8') if sys.version_info[0] == 2 else self.systemThreadingTasks)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.systemCollections is None:
            raise TProtocolException(message='Required field systemCollections is unset!')
        if self.systemCollectionsConcurrent is None:
            raise TProtocolException(message='Required field systemCollectionsConcurrent is unset!')
        if self.systemComponentModel is None:
            raise TProtocolException(message='Required field systemComponentModel is unset!')
        if self.systemConsole is None:
            raise TProtocolException(message='Required field systemConsole is unset!')
        if self.systemDiagnosticsContracts is None:
            raise TProtocolException(message='Required field systemDiagnosticsContracts is unset!')
        if self.systemDiagnosticsDebug is None:
            raise TProtocolException(message='Required field systemDiagnosticsDebug is unset!')
        if self.systemGlobalization is None:
            raise TProtocolException(message='Required field systemGlobalization is unset!')
        if self.systemLinq is None:
            raise TProtocolException(message='Required field systemLinq is unset!')
        if self.systemLinqExpressions is None:
            raise TProtocolException(message='Required field systemLinqExpressions is unset!')
        if self.systemLinqQueryable is None:
            raise TProtocolException(message='Required field systemLinqQueryable is unset!')
        if self.systemReflection is None:
            raise TProtocolException(message='Required field systemReflection is unset!')
        if self.systemReflectionExtensions is None:
            raise TProtocolException(message='Required field systemReflectionExtensions is unset!')
        if self.systemResourcesResourceManager is None:
            raise TProtocolException(message='Required field systemResourcesResourceManager is unset!')
        if self.systemRuntime is None:
            raise TProtocolException(message='Required field systemRuntime is unset!')
        if self.systemRuntimeExtensions is None:
            raise TProtocolException(message='Required field systemRuntimeExtensions is unset!')
        if self.systemThreading is None:
            raise TProtocolException(message='Required field systemThreading is unset!')
        if self.systemThreadingTasks is None:
            raise TProtocolException(message='Required field systemThreadingTasks is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Net45(object):
    """
    Attributes:
     - dependencies

    """


    def __init__(self, dependencies=None,):
        self.dependencies = dependencies

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.dependencies = Net45Dependencies()
                    self.dependencies.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Net45')
        if self.dependencies is not None:
            oprot.writeFieldBegin('dependencies', TType.STRUCT, 1)
            self.dependencies.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.dependencies is None:
            raise TProtocolException(message='Required field dependencies is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class K10(object):
    """
    Attributes:
     - dependencies

    """


    def __init__(self, dependencies=None,):
        self.dependencies = dependencies

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.dependencies = K10Dependencies()
                    self.dependencies.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('K10')
        if self.dependencies is not None:
            oprot.writeFieldBegin('dependencies', TType.STRUCT, 1)
            self.dependencies.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.dependencies is None:
            raise TProtocolException(message='Required field dependencies is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Frameworks(object):
    """
    Attributes:
     - net45
     - k10

    """


    def __init__(self, net45=None, k10=None,):
        self.net45 = net45
        self.k10 = k10

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.net45 = Net45()
                    self.net45.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.k10 = K10()
                    self.k10.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Frameworks')
        if self.net45 is not None:
            oprot.writeFieldBegin('net45', TType.STRUCT, 1)
            self.net45.write(oprot)
            oprot.writeFieldEnd()
        if self.k10 is not None:
            oprot.writeFieldBegin('k10', TType.STRUCT, 2)
            self.k10.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.net45 is None:
            raise TProtocolException(message='Required field net45 is unset!')
        if self.k10 is None:
            raise TProtocolException(message='Required field k10 is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Main(object):
    """
    Attributes:
     - version
     - compilationOptions
     - dependencies
     - code
     - frameworks

    """


    def __init__(self, version=None, compilationOptions=None, dependencies=None, code=None, frameworks=None,):
        self.version = version
        self.compilationOptions = compilationOptions
        self.dependencies = dependencies
        self.code = code
        self.frameworks = frameworks

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.version = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.compilationOptions = CompilationOptions()
                    self.compilationOptions.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.dependencies = Dependencies()
                    self.dependencies.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.code = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.frameworks = Frameworks()
                    self.frameworks.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Main')
        if self.version is not None:
            oprot.writeFieldBegin('version', TType.STRING, 1)
            oprot.writeString(self.version.encode('utf-8') if sys.version_info[0] == 2 else self.version)
            oprot.writeFieldEnd()
        if self.compilationOptions is not None:
            oprot.writeFieldBegin('compilationOptions', TType.STRUCT, 2)
            self.compilationOptions.write(oprot)
            oprot.writeFieldEnd()
        if self.dependencies is not None:
            oprot.writeFieldBegin('dependencies', TType.STRUCT, 3)
            self.dependencies.write(oprot)
            oprot.writeFieldEnd()
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.STRING, 4)
            oprot.writeString(self.code.encode('utf-8') if sys.version_info[0] == 2 else self.code)
            oprot.writeFieldEnd()
        if self.frameworks is not None:
            oprot.writeFieldBegin('frameworks', TType.STRUCT, 5)
            self.frameworks.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.version is None:
            raise TProtocolException(message='Required field version is unset!')
        if self.compilationOptions is None:
            raise TProtocolException(message='Required field compilationOptions is unset!')
        if self.dependencies is None:
            raise TProtocolException(message='Required field dependencies is unset!')
        if self.code is None:
            raise TProtocolException(message='Required field code is unset!')
        if self.frameworks is None:
            raise TProtocolException(message='Required field frameworks is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(CompilationOptions)
CompilationOptions.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'warningsAsErrors', None, None, ),  # 1
)
all_structs.append(Dependencies)
Dependencies.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'microsoftBclImmutable', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'microsoftAspNetConfigurationModel', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'microsoftAspNetDependencyInjection', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'microsoftAspNetLogging', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'systemDataCommon', 'UTF8', None, ),  # 5
)
all_structs.append(Net45Dependencies)
Net45Dependencies.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'systemRuntime', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'systemCollections', 'UTF8', None, ),  # 2
)
all_structs.append(K10Dependencies)
K10Dependencies.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'systemCollections', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'systemCollectionsConcurrent', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'systemComponentModel', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'systemConsole', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'systemDiagnosticsContracts', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'systemDiagnosticsDebug', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'systemGlobalization', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'systemLinq', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'systemLinqExpressions', 'UTF8', None, ),  # 9
    (10, TType.STRING, 'systemLinqQueryable', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'systemReflection', 'UTF8', None, ),  # 11
    (12, TType.STRING, 'systemReflectionExtensions', 'UTF8', None, ),  # 12
    (13, TType.STRING, 'systemResourcesResourceManager', 'UTF8', None, ),  # 13
    (14, TType.STRING, 'systemRuntime', 'UTF8', None, ),  # 14
    (15, TType.STRING, 'systemRuntimeExtensions', 'UTF8', None, ),  # 15
    (16, TType.STRING, 'systemThreading', 'UTF8', None, ),  # 16
    (17, TType.STRING, 'systemThreadingTasks', 'UTF8', None, ),  # 17
)
all_structs.append(Net45)
Net45.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'dependencies', [Net45Dependencies, None], None, ),  # 1
)
all_structs.append(K10)
K10.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'dependencies', [K10Dependencies, None], None, ),  # 1
)
all_structs.append(Frameworks)
Frameworks.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'net45', [Net45, None], None, ),  # 1
    (2, TType.STRUCT, 'k10', [K10, None], None, ),  # 2
)
all_structs.append(Main)
Main.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'version', 'UTF8', None, ),  # 1
    (2, TType.STRUCT, 'compilationOptions', [CompilationOptions, None], None, ),  # 2
    (3, TType.STRUCT, 'dependencies', [Dependencies, None], None, ),  # 3
    (4, TType.STRING, 'code', 'UTF8', None, ),  # 4
    (5, TType.STRUCT, 'frameworks', [Frameworks, None], None, ),  # 5
)
fix_spec(all_structs)
del all_structs
