#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class EcmaFeatures(object):
    """
    Attributes:
     - jsx

    """


    def __init__(self, jsx=None,):
        self.jsx = jsx

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.jsx = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('EcmaFeatures')
        if self.jsx is not None:
            oprot.writeFieldBegin('jsx', TType.BOOL, 1)
            oprot.writeBool(self.jsx)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.jsx is None:
            raise TProtocolException(message='Required field jsx is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Environment(object):
    """
    Attributes:
     - browser
     - node
     - es6

    """


    def __init__(self, browser=None, node=None, es6=None,):
        self.browser = browser
        self.node = node
        self.es6 = es6

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.browser = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.node = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.es6 = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Environment')
        if self.browser is not None:
            oprot.writeFieldBegin('browser', TType.BOOL, 1)
            oprot.writeBool(self.browser)
            oprot.writeFieldEnd()
        if self.node is not None:
            oprot.writeFieldBegin('node', TType.BOOL, 2)
            oprot.writeBool(self.node)
            oprot.writeFieldEnd()
        if self.es6 is not None:
            oprot.writeFieldBegin('es6', TType.BOOL, 3)
            oprot.writeBool(self.es6)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.browser is None:
            raise TProtocolException(message='Required field browser is unset!')
        if self.node is None:
            raise TProtocolException(message='Required field node is unset!')
        if self.es6 is None:
            raise TProtocolException(message='Required field es6 is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class JSDocOptions(object):
    """
    Attributes:
     - requireReturn

    """


    def __init__(self, requireReturn=None,):
        self.requireReturn = requireReturn

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.requireReturn = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('JSDocOptions')
        if self.requireReturn is not None:
            oprot.writeFieldBegin('requireReturn', TType.BOOL, 1)
            oprot.writeBool(self.requireReturn)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.requireReturn is None:
            raise TProtocolException(message='Required field requireReturn is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class JSDocRule(object):
    """
    Attributes:
     - numeric
     - options

    """


    def __init__(self, numeric=None, options=None,):
        self.numeric = numeric
        self.options = options

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BYTE:
                    self.numeric = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.options = JSDocOptions()
                    self.options.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('JSDocRule')
        if self.numeric is not None:
            oprot.writeFieldBegin('numeric', TType.BYTE, 1)
            oprot.writeByte(self.numeric)
            oprot.writeFieldEnd()
        if self.options is not None:
            oprot.writeFieldBegin('options', TType.STRUCT, 2)
            self.options.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Rules(object):
    """
    Attributes:
     - eqeqeq
     - commaDangle
     - noConsole
     - noDebugger
     - noExtraSemi
     - noExtraParens
     - noIrregularWhitespace
     - noUndef
     - noUnusedVars
     - semi
     - semiSpacing
     - validJsdoc
     - reactDisplayName
     - reactForbidPropTypes
     - reactJsxBooleanValue
     - reactJsxClosingBracketLocation
     - reactJsxCurlySpacing
     - reactJsxIndentProps
     - reactJsxMaxPropsPerLine
     - reactJsxNoDuplicateProps
     - reactJsxNoLiterals
     - reactJsxNoUndef
     - reactJsxSortPropTypes
     - reactJsxSortProps
     - reactJsxUsesReact
     - reactJsxUsesVars
     - reactNoDanger
     - reactNoDidMountSetState
     - reactNoDidUpdateSetState
     - reactNoDirectMutationState
     - reactNoMultiComp
     - reactNoSetState
     - reactNoUnknownProperty
     - reactPropTypes
     - reactReactInJsxScope
     - reactRequireExtension
     - reactSelfClosingComp
     - reactSortComp
     - reactWrapMultilines

    """


    def __init__(self, eqeqeq=None, commaDangle=None, noConsole=None, noDebugger=None, noExtraSemi=None, noExtraParens=None, noIrregularWhitespace=None, noUndef=None, noUnusedVars=None, semi=None, semiSpacing=None, validJsdoc=None, reactDisplayName=None, reactForbidPropTypes=None, reactJsxBooleanValue=None, reactJsxClosingBracketLocation=None, reactJsxCurlySpacing=None, reactJsxIndentProps=None, reactJsxMaxPropsPerLine=None, reactJsxNoDuplicateProps=None, reactJsxNoLiterals=None, reactJsxNoUndef=None, reactJsxSortPropTypes=None, reactJsxSortProps=None, reactJsxUsesReact=None, reactJsxUsesVars=None, reactNoDanger=None, reactNoDidMountSetState=None, reactNoDidUpdateSetState=None, reactNoDirectMutationState=None, reactNoMultiComp=None, reactNoSetState=None, reactNoUnknownProperty=None, reactPropTypes=None, reactReactInJsxScope=None, reactRequireExtension=None, reactSelfClosingComp=None, reactSortComp=None, reactWrapMultilines=None,):
        self.eqeqeq = eqeqeq
        self.commaDangle = commaDangle
        self.noConsole = noConsole
        self.noDebugger = noDebugger
        self.noExtraSemi = noExtraSemi
        self.noExtraParens = noExtraParens
        self.noIrregularWhitespace = noIrregularWhitespace
        self.noUndef = noUndef
        self.noUnusedVars = noUnusedVars
        self.semi = semi
        self.semiSpacing = semiSpacing
        self.validJsdoc = validJsdoc
        self.reactDisplayName = reactDisplayName
        self.reactForbidPropTypes = reactForbidPropTypes
        self.reactJsxBooleanValue = reactJsxBooleanValue
        self.reactJsxClosingBracketLocation = reactJsxClosingBracketLocation
        self.reactJsxCurlySpacing = reactJsxCurlySpacing
        self.reactJsxIndentProps = reactJsxIndentProps
        self.reactJsxMaxPropsPerLine = reactJsxMaxPropsPerLine
        self.reactJsxNoDuplicateProps = reactJsxNoDuplicateProps
        self.reactJsxNoLiterals = reactJsxNoLiterals
        self.reactJsxNoUndef = reactJsxNoUndef
        self.reactJsxSortPropTypes = reactJsxSortPropTypes
        self.reactJsxSortProps = reactJsxSortProps
        self.reactJsxUsesReact = reactJsxUsesReact
        self.reactJsxUsesVars = reactJsxUsesVars
        self.reactNoDanger = reactNoDanger
        self.reactNoDidMountSetState = reactNoDidMountSetState
        self.reactNoDidUpdateSetState = reactNoDidUpdateSetState
        self.reactNoDirectMutationState = reactNoDirectMutationState
        self.reactNoMultiComp = reactNoMultiComp
        self.reactNoSetState = reactNoSetState
        self.reactNoUnknownProperty = reactNoUnknownProperty
        self.reactPropTypes = reactPropTypes
        self.reactReactInJsxScope = reactReactInJsxScope
        self.reactRequireExtension = reactRequireExtension
        self.reactSelfClosingComp = reactSelfClosingComp
        self.reactSortComp = reactSortComp
        self.reactWrapMultilines = reactWrapMultilines

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BYTE:
                    self.eqeqeq = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BYTE:
                    self.commaDangle = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BYTE:
                    self.noConsole = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BYTE:
                    self.noDebugger = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BYTE:
                    self.noExtraSemi = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BYTE:
                    self.noExtraParens = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BYTE:
                    self.noIrregularWhitespace = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.BYTE:
                    self.noUndef = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.BYTE:
                    self.noUnusedVars = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.BYTE:
                    self.semi = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.BYTE:
                    self.semiSpacing = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.LIST:
                    self.validJsdoc = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = JSDocRule()
                        _elem5.read(iprot)
                        self.validJsdoc.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.BYTE:
                    self.reactDisplayName = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.BYTE:
                    self.reactForbidPropTypes = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.BYTE:
                    self.reactJsxBooleanValue = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.BYTE:
                    self.reactJsxClosingBracketLocation = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.BYTE:
                    self.reactJsxCurlySpacing = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.BYTE:
                    self.reactJsxIndentProps = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.BYTE:
                    self.reactJsxMaxPropsPerLine = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.BYTE:
                    self.reactJsxNoDuplicateProps = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.BYTE:
                    self.reactJsxNoLiterals = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.BYTE:
                    self.reactJsxNoUndef = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.BYTE:
                    self.reactJsxSortPropTypes = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.BYTE:
                    self.reactJsxSortProps = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 25:
                if ftype == TType.BYTE:
                    self.reactJsxUsesReact = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 26:
                if ftype == TType.BYTE:
                    self.reactJsxUsesVars = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 27:
                if ftype == TType.BYTE:
                    self.reactNoDanger = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 28:
                if ftype == TType.BYTE:
                    self.reactNoDidMountSetState = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 29:
                if ftype == TType.BYTE:
                    self.reactNoDidUpdateSetState = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 30:
                if ftype == TType.BYTE:
                    self.reactNoDirectMutationState = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 31:
                if ftype == TType.BYTE:
                    self.reactNoMultiComp = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 32:
                if ftype == TType.BYTE:
                    self.reactNoSetState = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 33:
                if ftype == TType.BYTE:
                    self.reactNoUnknownProperty = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 34:
                if ftype == TType.BYTE:
                    self.reactPropTypes = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 35:
                if ftype == TType.BYTE:
                    self.reactReactInJsxScope = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 36:
                if ftype == TType.BYTE:
                    self.reactRequireExtension = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 37:
                if ftype == TType.BYTE:
                    self.reactSelfClosingComp = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 38:
                if ftype == TType.BYTE:
                    self.reactSortComp = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 39:
                if ftype == TType.BYTE:
                    self.reactWrapMultilines = iprot.readByte()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Rules')
        if self.eqeqeq is not None:
            oprot.writeFieldBegin('eqeqeq', TType.BYTE, 1)
            oprot.writeByte(self.eqeqeq)
            oprot.writeFieldEnd()
        if self.commaDangle is not None:
            oprot.writeFieldBegin('commaDangle', TType.BYTE, 2)
            oprot.writeByte(self.commaDangle)
            oprot.writeFieldEnd()
        if self.noConsole is not None:
            oprot.writeFieldBegin('noConsole', TType.BYTE, 3)
            oprot.writeByte(self.noConsole)
            oprot.writeFieldEnd()
        if self.noDebugger is not None:
            oprot.writeFieldBegin('noDebugger', TType.BYTE, 4)
            oprot.writeByte(self.noDebugger)
            oprot.writeFieldEnd()
        if self.noExtraSemi is not None:
            oprot.writeFieldBegin('noExtraSemi', TType.BYTE, 5)
            oprot.writeByte(self.noExtraSemi)
            oprot.writeFieldEnd()
        if self.noExtraParens is not None:
            oprot.writeFieldBegin('noExtraParens', TType.BYTE, 6)
            oprot.writeByte(self.noExtraParens)
            oprot.writeFieldEnd()
        if self.noIrregularWhitespace is not None:
            oprot.writeFieldBegin('noIrregularWhitespace', TType.BYTE, 7)
            oprot.writeByte(self.noIrregularWhitespace)
            oprot.writeFieldEnd()
        if self.noUndef is not None:
            oprot.writeFieldBegin('noUndef', TType.BYTE, 8)
            oprot.writeByte(self.noUndef)
            oprot.writeFieldEnd()
        if self.noUnusedVars is not None:
            oprot.writeFieldBegin('noUnusedVars', TType.BYTE, 9)
            oprot.writeByte(self.noUnusedVars)
            oprot.writeFieldEnd()
        if self.semi is not None:
            oprot.writeFieldBegin('semi', TType.BYTE, 10)
            oprot.writeByte(self.semi)
            oprot.writeFieldEnd()
        if self.semiSpacing is not None:
            oprot.writeFieldBegin('semiSpacing', TType.BYTE, 11)
            oprot.writeByte(self.semiSpacing)
            oprot.writeFieldEnd()
        if self.validJsdoc is not None:
            oprot.writeFieldBegin('validJsdoc', TType.LIST, 12)
            oprot.writeListBegin(TType.STRUCT, len(self.validJsdoc))
            for iter6 in self.validJsdoc:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.reactDisplayName is not None:
            oprot.writeFieldBegin('reactDisplayName', TType.BYTE, 13)
            oprot.writeByte(self.reactDisplayName)
            oprot.writeFieldEnd()
        if self.reactForbidPropTypes is not None:
            oprot.writeFieldBegin('reactForbidPropTypes', TType.BYTE, 14)
            oprot.writeByte(self.reactForbidPropTypes)
            oprot.writeFieldEnd()
        if self.reactJsxBooleanValue is not None:
            oprot.writeFieldBegin('reactJsxBooleanValue', TType.BYTE, 15)
            oprot.writeByte(self.reactJsxBooleanValue)
            oprot.writeFieldEnd()
        if self.reactJsxClosingBracketLocation is not None:
            oprot.writeFieldBegin('reactJsxClosingBracketLocation', TType.BYTE, 16)
            oprot.writeByte(self.reactJsxClosingBracketLocation)
            oprot.writeFieldEnd()
        if self.reactJsxCurlySpacing is not None:
            oprot.writeFieldBegin('reactJsxCurlySpacing', TType.BYTE, 17)
            oprot.writeByte(self.reactJsxCurlySpacing)
            oprot.writeFieldEnd()
        if self.reactJsxIndentProps is not None:
            oprot.writeFieldBegin('reactJsxIndentProps', TType.BYTE, 18)
            oprot.writeByte(self.reactJsxIndentProps)
            oprot.writeFieldEnd()
        if self.reactJsxMaxPropsPerLine is not None:
            oprot.writeFieldBegin('reactJsxMaxPropsPerLine', TType.BYTE, 19)
            oprot.writeByte(self.reactJsxMaxPropsPerLine)
            oprot.writeFieldEnd()
        if self.reactJsxNoDuplicateProps is not None:
            oprot.writeFieldBegin('reactJsxNoDuplicateProps', TType.BYTE, 20)
            oprot.writeByte(self.reactJsxNoDuplicateProps)
            oprot.writeFieldEnd()
        if self.reactJsxNoLiterals is not None:
            oprot.writeFieldBegin('reactJsxNoLiterals', TType.BYTE, 21)
            oprot.writeByte(self.reactJsxNoLiterals)
            oprot.writeFieldEnd()
        if self.reactJsxNoUndef is not None:
            oprot.writeFieldBegin('reactJsxNoUndef', TType.BYTE, 22)
            oprot.writeByte(self.reactJsxNoUndef)
            oprot.writeFieldEnd()
        if self.reactJsxSortPropTypes is not None:
            oprot.writeFieldBegin('reactJsxSortPropTypes', TType.BYTE, 23)
            oprot.writeByte(self.reactJsxSortPropTypes)
            oprot.writeFieldEnd()
        if self.reactJsxSortProps is not None:
            oprot.writeFieldBegin('reactJsxSortProps', TType.BYTE, 24)
            oprot.writeByte(self.reactJsxSortProps)
            oprot.writeFieldEnd()
        if self.reactJsxUsesReact is not None:
            oprot.writeFieldBegin('reactJsxUsesReact', TType.BYTE, 25)
            oprot.writeByte(self.reactJsxUsesReact)
            oprot.writeFieldEnd()
        if self.reactJsxUsesVars is not None:
            oprot.writeFieldBegin('reactJsxUsesVars', TType.BYTE, 26)
            oprot.writeByte(self.reactJsxUsesVars)
            oprot.writeFieldEnd()
        if self.reactNoDanger is not None:
            oprot.writeFieldBegin('reactNoDanger', TType.BYTE, 27)
            oprot.writeByte(self.reactNoDanger)
            oprot.writeFieldEnd()
        if self.reactNoDidMountSetState is not None:
            oprot.writeFieldBegin('reactNoDidMountSetState', TType.BYTE, 28)
            oprot.writeByte(self.reactNoDidMountSetState)
            oprot.writeFieldEnd()
        if self.reactNoDidUpdateSetState is not None:
            oprot.writeFieldBegin('reactNoDidUpdateSetState', TType.BYTE, 29)
            oprot.writeByte(self.reactNoDidUpdateSetState)
            oprot.writeFieldEnd()
        if self.reactNoDirectMutationState is not None:
            oprot.writeFieldBegin('reactNoDirectMutationState', TType.BYTE, 30)
            oprot.writeByte(self.reactNoDirectMutationState)
            oprot.writeFieldEnd()
        if self.reactNoMultiComp is not None:
            oprot.writeFieldBegin('reactNoMultiComp', TType.BYTE, 31)
            oprot.writeByte(self.reactNoMultiComp)
            oprot.writeFieldEnd()
        if self.reactNoSetState is not None:
            oprot.writeFieldBegin('reactNoSetState', TType.BYTE, 32)
            oprot.writeByte(self.reactNoSetState)
            oprot.writeFieldEnd()
        if self.reactNoUnknownProperty is not None:
            oprot.writeFieldBegin('reactNoUnknownProperty', TType.BYTE, 33)
            oprot.writeByte(self.reactNoUnknownProperty)
            oprot.writeFieldEnd()
        if self.reactPropTypes is not None:
            oprot.writeFieldBegin('reactPropTypes', TType.BYTE, 34)
            oprot.writeByte(self.reactPropTypes)
            oprot.writeFieldEnd()
        if self.reactReactInJsxScope is not None:
            oprot.writeFieldBegin('reactReactInJsxScope', TType.BYTE, 35)
            oprot.writeByte(self.reactReactInJsxScope)
            oprot.writeFieldEnd()
        if self.reactRequireExtension is not None:
            oprot.writeFieldBegin('reactRequireExtension', TType.BYTE, 36)
            oprot.writeByte(self.reactRequireExtension)
            oprot.writeFieldEnd()
        if self.reactSelfClosingComp is not None:
            oprot.writeFieldBegin('reactSelfClosingComp', TType.BYTE, 37)
            oprot.writeByte(self.reactSelfClosingComp)
            oprot.writeFieldEnd()
        if self.reactSortComp is not None:
            oprot.writeFieldBegin('reactSortComp', TType.BYTE, 38)
            oprot.writeByte(self.reactSortComp)
            oprot.writeFieldEnd()
        if self.reactWrapMultilines is not None:
            oprot.writeFieldBegin('reactWrapMultilines', TType.BYTE, 39)
            oprot.writeByte(self.reactWrapMultilines)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.eqeqeq is None:
            raise TProtocolException(message='Required field eqeqeq is unset!')
        if self.commaDangle is None:
            raise TProtocolException(message='Required field commaDangle is unset!')
        if self.noConsole is None:
            raise TProtocolException(message='Required field noConsole is unset!')
        if self.noDebugger is None:
            raise TProtocolException(message='Required field noDebugger is unset!')
        if self.noExtraSemi is None:
            raise TProtocolException(message='Required field noExtraSemi is unset!')
        if self.noExtraParens is None:
            raise TProtocolException(message='Required field noExtraParens is unset!')
        if self.noIrregularWhitespace is None:
            raise TProtocolException(message='Required field noIrregularWhitespace is unset!')
        if self.noUndef is None:
            raise TProtocolException(message='Required field noUndef is unset!')
        if self.noUnusedVars is None:
            raise TProtocolException(message='Required field noUnusedVars is unset!')
        if self.semi is None:
            raise TProtocolException(message='Required field semi is unset!')
        if self.semiSpacing is None:
            raise TProtocolException(message='Required field semiSpacing is unset!')
        if self.validJsdoc is None:
            raise TProtocolException(message='Required field validJsdoc is unset!')
        if self.reactDisplayName is None:
            raise TProtocolException(message='Required field reactDisplayName is unset!')
        if self.reactForbidPropTypes is None:
            raise TProtocolException(message='Required field reactForbidPropTypes is unset!')
        if self.reactJsxBooleanValue is None:
            raise TProtocolException(message='Required field reactJsxBooleanValue is unset!')
        if self.reactJsxClosingBracketLocation is None:
            raise TProtocolException(message='Required field reactJsxClosingBracketLocation is unset!')
        if self.reactJsxCurlySpacing is None:
            raise TProtocolException(message='Required field reactJsxCurlySpacing is unset!')
        if self.reactJsxIndentProps is None:
            raise TProtocolException(message='Required field reactJsxIndentProps is unset!')
        if self.reactJsxMaxPropsPerLine is None:
            raise TProtocolException(message='Required field reactJsxMaxPropsPerLine is unset!')
        if self.reactJsxNoDuplicateProps is None:
            raise TProtocolException(message='Required field reactJsxNoDuplicateProps is unset!')
        if self.reactJsxNoLiterals is None:
            raise TProtocolException(message='Required field reactJsxNoLiterals is unset!')
        if self.reactJsxNoUndef is None:
            raise TProtocolException(message='Required field reactJsxNoUndef is unset!')
        if self.reactJsxSortPropTypes is None:
            raise TProtocolException(message='Required field reactJsxSortPropTypes is unset!')
        if self.reactJsxSortProps is None:
            raise TProtocolException(message='Required field reactJsxSortProps is unset!')
        if self.reactJsxUsesReact is None:
            raise TProtocolException(message='Required field reactJsxUsesReact is unset!')
        if self.reactJsxUsesVars is None:
            raise TProtocolException(message='Required field reactJsxUsesVars is unset!')
        if self.reactNoDanger is None:
            raise TProtocolException(message='Required field reactNoDanger is unset!')
        if self.reactNoDidMountSetState is None:
            raise TProtocolException(message='Required field reactNoDidMountSetState is unset!')
        if self.reactNoDidUpdateSetState is None:
            raise TProtocolException(message='Required field reactNoDidUpdateSetState is unset!')
        if self.reactNoDirectMutationState is None:
            raise TProtocolException(message='Required field reactNoDirectMutationState is unset!')
        if self.reactNoMultiComp is None:
            raise TProtocolException(message='Required field reactNoMultiComp is unset!')
        if self.reactNoSetState is None:
            raise TProtocolException(message='Required field reactNoSetState is unset!')
        if self.reactNoUnknownProperty is None:
            raise TProtocolException(message='Required field reactNoUnknownProperty is unset!')
        if self.reactPropTypes is None:
            raise TProtocolException(message='Required field reactPropTypes is unset!')
        if self.reactReactInJsxScope is None:
            raise TProtocolException(message='Required field reactReactInJsxScope is unset!')
        if self.reactRequireExtension is None:
            raise TProtocolException(message='Required field reactRequireExtension is unset!')
        if self.reactSelfClosingComp is None:
            raise TProtocolException(message='Required field reactSelfClosingComp is unset!')
        if self.reactSortComp is None:
            raise TProtocolException(message='Required field reactSortComp is unset!')
        if self.reactWrapMultilines is None:
            raise TProtocolException(message='Required field reactWrapMultilines is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Main(object):
    """
    Attributes:
     - extension
     - parser
     - ecmaFeatures
     - plugins
     - env
     - rules

    """


    def __init__(self, extension=None, parser=None, ecmaFeatures=None, plugins=None, env=None, rules=None,):
        self.extension = extension
        self.parser = parser
        self.ecmaFeatures = ecmaFeatures
        self.plugins = plugins
        self.env = env
        self.rules = rules

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.extension = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.parser = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ecmaFeatures = EcmaFeatures()
                    self.ecmaFeatures.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.plugins = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.plugins.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.env = Environment()
                    self.env.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.rules = Rules()
                    self.rules.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Main')
        if self.extension is not None:
            oprot.writeFieldBegin('extension', TType.STRING, 1)
            oprot.writeString(self.extension.encode('utf-8') if sys.version_info[0] == 2 else self.extension)
            oprot.writeFieldEnd()
        if self.parser is not None:
            oprot.writeFieldBegin('parser', TType.STRING, 2)
            oprot.writeString(self.parser.encode('utf-8') if sys.version_info[0] == 2 else self.parser)
            oprot.writeFieldEnd()
        if self.ecmaFeatures is not None:
            oprot.writeFieldBegin('ecmaFeatures', TType.STRUCT, 3)
            self.ecmaFeatures.write(oprot)
            oprot.writeFieldEnd()
        if self.plugins is not None:
            oprot.writeFieldBegin('plugins', TType.LIST, 4)
            oprot.writeListBegin(TType.STRING, len(self.plugins))
            for iter13 in self.plugins:
                oprot.writeString(iter13.encode('utf-8') if sys.version_info[0] == 2 else iter13)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.env is not None:
            oprot.writeFieldBegin('env', TType.STRUCT, 5)
            self.env.write(oprot)
            oprot.writeFieldEnd()
        if self.rules is not None:
            oprot.writeFieldBegin('rules', TType.STRUCT, 6)
            self.rules.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.extension is None:
            raise TProtocolException(message='Required field extension is unset!')
        if self.parser is None:
            raise TProtocolException(message='Required field parser is unset!')
        if self.ecmaFeatures is None:
            raise TProtocolException(message='Required field ecmaFeatures is unset!')
        if self.plugins is None:
            raise TProtocolException(message='Required field plugins is unset!')
        if self.env is None:
            raise TProtocolException(message='Required field env is unset!')
        if self.rules is None:
            raise TProtocolException(message='Required field rules is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(EcmaFeatures)
EcmaFeatures.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'jsx', None, None, ),  # 1
)
all_structs.append(Environment)
Environment.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'browser', None, None, ),  # 1
    (2, TType.BOOL, 'node', None, None, ),  # 2
    (3, TType.BOOL, 'es6', None, None, ),  # 3
)
all_structs.append(JSDocOptions)
JSDocOptions.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'requireReturn', None, None, ),  # 1
)
all_structs.append(JSDocRule)
JSDocRule.thrift_spec = (
    None,  # 0
    (1, TType.BYTE, 'numeric', None, None, ),  # 1
    (2, TType.STRUCT, 'options', [JSDocOptions, None], None, ),  # 2
)
all_structs.append(Rules)
Rules.thrift_spec = (
    None,  # 0
    (1, TType.BYTE, 'eqeqeq', None, None, ),  # 1
    (2, TType.BYTE, 'commaDangle', None, None, ),  # 2
    (3, TType.BYTE, 'noConsole', None, None, ),  # 3
    (4, TType.BYTE, 'noDebugger', None, None, ),  # 4
    (5, TType.BYTE, 'noExtraSemi', None, None, ),  # 5
    (6, TType.BYTE, 'noExtraParens', None, None, ),  # 6
    (7, TType.BYTE, 'noIrregularWhitespace', None, None, ),  # 7
    (8, TType.BYTE, 'noUndef', None, None, ),  # 8
    (9, TType.BYTE, 'noUnusedVars', None, None, ),  # 9
    (10, TType.BYTE, 'semi', None, None, ),  # 10
    (11, TType.BYTE, 'semiSpacing', None, None, ),  # 11
    (12, TType.LIST, 'validJsdoc', (TType.STRUCT, [JSDocRule, None], False), None, ),  # 12
    (13, TType.BYTE, 'reactDisplayName', None, None, ),  # 13
    (14, TType.BYTE, 'reactForbidPropTypes', None, None, ),  # 14
    (15, TType.BYTE, 'reactJsxBooleanValue', None, None, ),  # 15
    (16, TType.BYTE, 'reactJsxClosingBracketLocation', None, None, ),  # 16
    (17, TType.BYTE, 'reactJsxCurlySpacing', None, None, ),  # 17
    (18, TType.BYTE, 'reactJsxIndentProps', None, None, ),  # 18
    (19, TType.BYTE, 'reactJsxMaxPropsPerLine', None, None, ),  # 19
    (20, TType.BYTE, 'reactJsxNoDuplicateProps', None, None, ),  # 20
    (21, TType.BYTE, 'reactJsxNoLiterals', None, None, ),  # 21
    (22, TType.BYTE, 'reactJsxNoUndef', None, None, ),  # 22
    (23, TType.BYTE, 'reactJsxSortPropTypes', None, None, ),  # 23
    (24, TType.BYTE, 'reactJsxSortProps', None, None, ),  # 24
    (25, TType.BYTE, 'reactJsxUsesReact', None, None, ),  # 25
    (26, TType.BYTE, 'reactJsxUsesVars', None, None, ),  # 26
    (27, TType.BYTE, 'reactNoDanger', None, None, ),  # 27
    (28, TType.BYTE, 'reactNoDidMountSetState', None, None, ),  # 28
    (29, TType.BYTE, 'reactNoDidUpdateSetState', None, None, ),  # 29
    (30, TType.BYTE, 'reactNoDirectMutationState', None, None, ),  # 30
    (31, TType.BYTE, 'reactNoMultiComp', None, None, ),  # 31
    (32, TType.BYTE, 'reactNoSetState', None, None, ),  # 32
    (33, TType.BYTE, 'reactNoUnknownProperty', None, None, ),  # 33
    (34, TType.BYTE, 'reactPropTypes', None, None, ),  # 34
    (35, TType.BYTE, 'reactReactInJsxScope', None, None, ),  # 35
    (36, TType.BYTE, 'reactRequireExtension', None, None, ),  # 36
    (37, TType.BYTE, 'reactSelfClosingComp', None, None, ),  # 37
    (38, TType.BYTE, 'reactSortComp', None, None, ),  # 38
    (39, TType.BYTE, 'reactWrapMultilines', None, None, ),  # 39
)
all_structs.append(Main)
Main.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'extension', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'parser', 'UTF8', None, ),  # 2
    (3, TType.STRUCT, 'ecmaFeatures', [EcmaFeatures, None], None, ),  # 3
    (4, TType.LIST, 'plugins', (TType.STRING, 'UTF8', False), None, ),  # 4
    (5, TType.STRUCT, 'env', [Environment, None], None, ),  # 5
    (6, TType.STRUCT, 'rules', [Rules, None], None, ),  # 6
)
fix_spec(all_structs)
del all_structs
