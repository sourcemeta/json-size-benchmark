#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class Globals(object):
    """
    Attributes:
     - abortOnAssertionFailure
     - abortOnElementLocateError
     - waitForConditionPollInterval
     - waitForConditionTimeout
     - throwOnMultipleElementsReturned
     - suppressWarningsOnMultipleElementsReturned
     - asyncHookTimeout
     - unitTestsTimeout
     - customReporterCallbackTimeout
     - retryAssertionTimeout

    """


    def __init__(self, abortOnAssertionFailure=None, abortOnElementLocateError=None, waitForConditionPollInterval=None, waitForConditionTimeout=None, throwOnMultipleElementsReturned=None, suppressWarningsOnMultipleElementsReturned=None, asyncHookTimeout=None, unitTestsTimeout=None, customReporterCallbackTimeout=None, retryAssertionTimeout=None,):
        self.abortOnAssertionFailure = abortOnAssertionFailure
        self.abortOnElementLocateError = abortOnElementLocateError
        self.waitForConditionPollInterval = waitForConditionPollInterval
        self.waitForConditionTimeout = waitForConditionTimeout
        self.throwOnMultipleElementsReturned = throwOnMultipleElementsReturned
        self.suppressWarningsOnMultipleElementsReturned = suppressWarningsOnMultipleElementsReturned
        self.asyncHookTimeout = asyncHookTimeout
        self.unitTestsTimeout = unitTestsTimeout
        self.customReporterCallbackTimeout = customReporterCallbackTimeout
        self.retryAssertionTimeout = retryAssertionTimeout

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.abortOnAssertionFailure = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.abortOnElementLocateError = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I16:
                    self.waitForConditionPollInterval = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I16:
                    self.waitForConditionTimeout = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.throwOnMultipleElementsReturned = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.suppressWarningsOnMultipleElementsReturned = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I16:
                    self.asyncHookTimeout = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I16:
                    self.unitTestsTimeout = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I16:
                    self.customReporterCallbackTimeout = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I16:
                    self.retryAssertionTimeout = iprot.readI16()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Globals')
        if self.abortOnAssertionFailure is not None:
            oprot.writeFieldBegin('abortOnAssertionFailure', TType.BOOL, 1)
            oprot.writeBool(self.abortOnAssertionFailure)
            oprot.writeFieldEnd()
        if self.abortOnElementLocateError is not None:
            oprot.writeFieldBegin('abortOnElementLocateError', TType.BOOL, 2)
            oprot.writeBool(self.abortOnElementLocateError)
            oprot.writeFieldEnd()
        if self.waitForConditionPollInterval is not None:
            oprot.writeFieldBegin('waitForConditionPollInterval', TType.I16, 3)
            oprot.writeI16(self.waitForConditionPollInterval)
            oprot.writeFieldEnd()
        if self.waitForConditionTimeout is not None:
            oprot.writeFieldBegin('waitForConditionTimeout', TType.I16, 4)
            oprot.writeI16(self.waitForConditionTimeout)
            oprot.writeFieldEnd()
        if self.throwOnMultipleElementsReturned is not None:
            oprot.writeFieldBegin('throwOnMultipleElementsReturned', TType.BOOL, 5)
            oprot.writeBool(self.throwOnMultipleElementsReturned)
            oprot.writeFieldEnd()
        if self.suppressWarningsOnMultipleElementsReturned is not None:
            oprot.writeFieldBegin('suppressWarningsOnMultipleElementsReturned', TType.BOOL, 6)
            oprot.writeBool(self.suppressWarningsOnMultipleElementsReturned)
            oprot.writeFieldEnd()
        if self.asyncHookTimeout is not None:
            oprot.writeFieldBegin('asyncHookTimeout', TType.I16, 7)
            oprot.writeI16(self.asyncHookTimeout)
            oprot.writeFieldEnd()
        if self.unitTestsTimeout is not None:
            oprot.writeFieldBegin('unitTestsTimeout', TType.I16, 8)
            oprot.writeI16(self.unitTestsTimeout)
            oprot.writeFieldEnd()
        if self.customReporterCallbackTimeout is not None:
            oprot.writeFieldBegin('customReporterCallbackTimeout', TType.I16, 9)
            oprot.writeI16(self.customReporterCallbackTimeout)
            oprot.writeFieldEnd()
        if self.retryAssertionTimeout is not None:
            oprot.writeFieldBegin('retryAssertionTimeout', TType.I16, 10)
            oprot.writeI16(self.retryAssertionTimeout)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.abortOnAssertionFailure is None:
            raise TProtocolException(message='Required field abortOnAssertionFailure is unset!')
        if self.abortOnElementLocateError is None:
            raise TProtocolException(message='Required field abortOnElementLocateError is unset!')
        if self.waitForConditionPollInterval is None:
            raise TProtocolException(message='Required field waitForConditionPollInterval is unset!')
        if self.waitForConditionTimeout is None:
            raise TProtocolException(message='Required field waitForConditionTimeout is unset!')
        if self.throwOnMultipleElementsReturned is None:
            raise TProtocolException(message='Required field throwOnMultipleElementsReturned is unset!')
        if self.suppressWarningsOnMultipleElementsReturned is None:
            raise TProtocolException(message='Required field suppressWarningsOnMultipleElementsReturned is unset!')
        if self.asyncHookTimeout is None:
            raise TProtocolException(message='Required field asyncHookTimeout is unset!')
        if self.unitTestsTimeout is None:
            raise TProtocolException(message='Required field unitTestsTimeout is unset!')
        if self.customReporterCallbackTimeout is None:
            raise TProtocolException(message='Required field customReporterCallbackTimeout is unset!')
        if self.retryAssertionTimeout is None:
            raise TProtocolException(message='Required field retryAssertionTimeout is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Empty(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Empty')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Selenium(object):
    """
    Attributes:
     - start_process
     - cli_args
     - server_path
     - log_path
     - check_process_delay
     - max_status_poll_tries
     - status_poll_interval

    """


    def __init__(self, start_process=None, cli_args=None, server_path=None, log_path=None, check_process_delay=None, max_status_poll_tries=None, status_poll_interval=None,):
        self.start_process = start_process
        self.cli_args = cli_args
        self.server_path = server_path
        self.log_path = log_path
        self.check_process_delay = check_process_delay
        self.max_status_poll_tries = max_status_poll_tries
        self.status_poll_interval = status_poll_interval

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.start_process = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.cli_args = Empty()
                    self.cli_args.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.server_path = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.log_path = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I16:
                    self.check_process_delay = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BYTE:
                    self.max_status_poll_tries = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I16:
                    self.status_poll_interval = iprot.readI16()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Selenium')
        if self.start_process is not None:
            oprot.writeFieldBegin('start_process', TType.BOOL, 1)
            oprot.writeBool(self.start_process)
            oprot.writeFieldEnd()
        if self.cli_args is not None:
            oprot.writeFieldBegin('cli_args', TType.STRUCT, 2)
            self.cli_args.write(oprot)
            oprot.writeFieldEnd()
        if self.server_path is not None:
            oprot.writeFieldBegin('server_path', TType.STRING, 3)
            oprot.writeString(self.server_path.encode('utf-8') if sys.version_info[0] == 2 else self.server_path)
            oprot.writeFieldEnd()
        if self.log_path is not None:
            oprot.writeFieldBegin('log_path', TType.STRING, 4)
            oprot.writeString(self.log_path.encode('utf-8') if sys.version_info[0] == 2 else self.log_path)
            oprot.writeFieldEnd()
        if self.check_process_delay is not None:
            oprot.writeFieldBegin('check_process_delay', TType.I16, 5)
            oprot.writeI16(self.check_process_delay)
            oprot.writeFieldEnd()
        if self.max_status_poll_tries is not None:
            oprot.writeFieldBegin('max_status_poll_tries', TType.BYTE, 6)
            oprot.writeByte(self.max_status_poll_tries)
            oprot.writeFieldEnd()
        if self.status_poll_interval is not None:
            oprot.writeFieldBegin('status_poll_interval', TType.I16, 7)
            oprot.writeI16(self.status_poll_interval)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.start_process is None:
            raise TProtocolException(message='Required field start_process is unset!')
        if self.cli_args is None:
            raise TProtocolException(message='Required field cli_args is unset!')
        if self.log_path is None:
            raise TProtocolException(message='Required field log_path is unset!')
        if self.check_process_delay is None:
            raise TProtocolException(message='Required field check_process_delay is unset!')
        if self.max_status_poll_tries is None:
            raise TProtocolException(message='Required field max_status_poll_tries is unset!')
        if self.status_poll_interval is None:
            raise TProtocolException(message='Required field status_poll_interval is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class WebDriver(object):
    """
    Attributes:
     - start_process
     - cli_args
     - server_path
     - log_path
     - check_process_delay
     - max_status_poll_tries
     - status_poll_interval
     - process_create_timeout
     - timeout_options

    """


    def __init__(self, start_process=None, cli_args=None, server_path=None, log_path=None, check_process_delay=None, max_status_poll_tries=None, status_poll_interval=None, process_create_timeout=None, timeout_options=None,):
        self.start_process = start_process
        self.cli_args = cli_args
        self.server_path = server_path
        self.log_path = log_path
        self.check_process_delay = check_process_delay
        self.max_status_poll_tries = max_status_poll_tries
        self.status_poll_interval = status_poll_interval
        self.process_create_timeout = process_create_timeout
        self.timeout_options = timeout_options

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.start_process = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.cli_args = Empty()
                    self.cli_args.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.server_path = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.log_path = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BYTE:
                    self.check_process_delay = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BYTE:
                    self.max_status_poll_tries = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I16:
                    self.status_poll_interval = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.process_create_timeout = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRUCT:
                    self.timeout_options = Empty()
                    self.timeout_options.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('WebDriver')
        if self.start_process is not None:
            oprot.writeFieldBegin('start_process', TType.BOOL, 1)
            oprot.writeBool(self.start_process)
            oprot.writeFieldEnd()
        if self.cli_args is not None:
            oprot.writeFieldBegin('cli_args', TType.STRUCT, 2)
            self.cli_args.write(oprot)
            oprot.writeFieldEnd()
        if self.server_path is not None:
            oprot.writeFieldBegin('server_path', TType.STRING, 3)
            oprot.writeString(self.server_path.encode('utf-8') if sys.version_info[0] == 2 else self.server_path)
            oprot.writeFieldEnd()
        if self.log_path is not None:
            oprot.writeFieldBegin('log_path', TType.STRING, 4)
            oprot.writeString(self.log_path.encode('utf-8') if sys.version_info[0] == 2 else self.log_path)
            oprot.writeFieldEnd()
        if self.check_process_delay is not None:
            oprot.writeFieldBegin('check_process_delay', TType.BYTE, 5)
            oprot.writeByte(self.check_process_delay)
            oprot.writeFieldEnd()
        if self.max_status_poll_tries is not None:
            oprot.writeFieldBegin('max_status_poll_tries', TType.BYTE, 6)
            oprot.writeByte(self.max_status_poll_tries)
            oprot.writeFieldEnd()
        if self.status_poll_interval is not None:
            oprot.writeFieldBegin('status_poll_interval', TType.I16, 7)
            oprot.writeI16(self.status_poll_interval)
            oprot.writeFieldEnd()
        if self.process_create_timeout is not None:
            oprot.writeFieldBegin('process_create_timeout', TType.I32, 8)
            oprot.writeI32(self.process_create_timeout)
            oprot.writeFieldEnd()
        if self.timeout_options is not None:
            oprot.writeFieldBegin('timeout_options', TType.STRUCT, 9)
            self.timeout_options.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.start_process is None:
            raise TProtocolException(message='Required field start_process is unset!')
        if self.cli_args is None:
            raise TProtocolException(message='Required field cli_args is unset!')
        if self.log_path is None:
            raise TProtocolException(message='Required field log_path is unset!')
        if self.check_process_delay is None:
            raise TProtocolException(message='Required field check_process_delay is unset!')
        if self.max_status_poll_tries is None:
            raise TProtocolException(message='Required field max_status_poll_tries is unset!')
        if self.status_poll_interval is None:
            raise TProtocolException(message='Required field status_poll_interval is unset!')
        if self.process_create_timeout is None:
            raise TProtocolException(message='Required field process_create_timeout is unset!')
        if self.timeout_options is None:
            raise TProtocolException(message='Required field timeout_options is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DesiredCapabilities(object):
    """
    Attributes:
     - browserName

    """


    def __init__(self, browserName=None,):
        self.browserName = browserName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.browserName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DesiredCapabilities')
        if self.browserName is not None:
            oprot.writeFieldBegin('browserName', TType.STRING, 1)
            oprot.writeString(self.browserName.encode('utf-8') if sys.version_info[0] == 2 else self.browserName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.browserName is None:
            raise TProtocolException(message='Required field browserName is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Main(object):
    """
    Attributes:
     - custom_commands_path
     - custom_assertions_path
     - page_objects_path
     - globals_path
     - globals
     - dotenv
     - persist_globals
     - output_folder
     - src_folders
     - live_output
     - disable_colors
     - parallel_process_delay
     - selenium
     - start_session
     - end_session_on_fail
     - test_workers
     - test_runner
     - webdriver
     - test_settings
     - launch_url
     - silent
     - output
     - detailed_output
     - output_timestamp
     - disable_error_log
     - screenshots
     - log_screenshot_data
     - desiredCapabilities
     - exclude
     - filter
     - skipgroup
     - sync_test_names
     - skiptags
     - use_xpath
     - parallel_mode
     - report_prefix
     - unit_tests_mode
     - default_reporter

    """


    def __init__(self, custom_commands_path=None, custom_assertions_path=None, page_objects_path=None, globals_path=None, globals=None, dotenv=None, persist_globals=None, output_folder=None, src_folders=None, live_output=None, disable_colors=None, parallel_process_delay=None, selenium=None, start_session=None, end_session_on_fail=None, test_workers=None, test_runner=None, webdriver=None, test_settings=None, launch_url=None, silent=None, output=None, detailed_output=None, output_timestamp=None, disable_error_log=None, screenshots=None, log_screenshot_data=None, desiredCapabilities=None, exclude=None, filter=None, skipgroup=None, sync_test_names=None, skiptags=None, use_xpath=None, parallel_mode=None, report_prefix=None, unit_tests_mode=None, default_reporter=None,):
        self.custom_commands_path = custom_commands_path
        self.custom_assertions_path = custom_assertions_path
        self.page_objects_path = page_objects_path
        self.globals_path = globals_path
        self.globals = globals
        self.dotenv = dotenv
        self.persist_globals = persist_globals
        self.output_folder = output_folder
        self.src_folders = src_folders
        self.live_output = live_output
        self.disable_colors = disable_colors
        self.parallel_process_delay = parallel_process_delay
        self.selenium = selenium
        self.start_session = start_session
        self.end_session_on_fail = end_session_on_fail
        self.test_workers = test_workers
        self.test_runner = test_runner
        self.webdriver = webdriver
        self.test_settings = test_settings
        self.launch_url = launch_url
        self.silent = silent
        self.output = output
        self.detailed_output = detailed_output
        self.output_timestamp = output_timestamp
        self.disable_error_log = disable_error_log
        self.screenshots = screenshots
        self.log_screenshot_data = log_screenshot_data
        self.desiredCapabilities = desiredCapabilities
        self.exclude = exclude
        self.filter = filter
        self.skipgroup = skipgroup
        self.sync_test_names = sync_test_names
        self.skiptags = skiptags
        self.use_xpath = use_xpath
        self.parallel_mode = parallel_mode
        self.report_prefix = report_prefix
        self.unit_tests_mode = unit_tests_mode
        self.default_reporter = default_reporter

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.custom_commands_path = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.custom_assertions_path = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.page_objects_path = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.globals_path = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.globals = Globals()
                    self.globals.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.dotenv = Empty()
                    self.dotenv.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.persist_globals = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.output_folder = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.src_folders = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.BOOL:
                    self.live_output = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.BOOL:
                    self.disable_colors = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.BYTE:
                    self.parallel_process_delay = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRUCT:
                    self.selenium = Selenium()
                    self.selenium.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.BOOL:
                    self.start_session = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.BOOL:
                    self.end_session_on_fail = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.BOOL:
                    self.test_workers = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.STRING:
                    self.test_runner = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.STRUCT:
                    self.webdriver = WebDriver()
                    self.webdriver.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.STRUCT:
                    self.test_settings = Empty()
                    self.test_settings.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.STRING:
                    self.launch_url = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.BOOL:
                    self.silent = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.BOOL:
                    self.output = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.BOOL:
                    self.detailed_output = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.BOOL:
                    self.output_timestamp = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 25:
                if ftype == TType.BOOL:
                    self.disable_error_log = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 26:
                if ftype == TType.BOOL:
                    self.screenshots = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 27:
                if ftype == TType.BOOL:
                    self.log_screenshot_data = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 28:
                if ftype == TType.STRUCT:
                    self.desiredCapabilities = DesiredCapabilities()
                    self.desiredCapabilities.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 29:
                if ftype == TType.STRING:
                    self.exclude = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 30:
                if ftype == TType.STRING:
                    self.filter = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 31:
                if ftype == TType.STRING:
                    self.skipgroup = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 32:
                if ftype == TType.BOOL:
                    self.sync_test_names = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 33:
                if ftype == TType.STRING:
                    self.skiptags = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 34:
                if ftype == TType.BOOL:
                    self.use_xpath = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 35:
                if ftype == TType.BOOL:
                    self.parallel_mode = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 36:
                if ftype == TType.STRING:
                    self.report_prefix = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 37:
                if ftype == TType.BOOL:
                    self.unit_tests_mode = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 38:
                if ftype == TType.STRING:
                    self.default_reporter = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Main')
        if self.custom_commands_path is not None:
            oprot.writeFieldBegin('custom_commands_path', TType.STRING, 1)
            oprot.writeString(self.custom_commands_path.encode('utf-8') if sys.version_info[0] == 2 else self.custom_commands_path)
            oprot.writeFieldEnd()
        if self.custom_assertions_path is not None:
            oprot.writeFieldBegin('custom_assertions_path', TType.STRING, 2)
            oprot.writeString(self.custom_assertions_path.encode('utf-8') if sys.version_info[0] == 2 else self.custom_assertions_path)
            oprot.writeFieldEnd()
        if self.page_objects_path is not None:
            oprot.writeFieldBegin('page_objects_path', TType.STRING, 3)
            oprot.writeString(self.page_objects_path.encode('utf-8') if sys.version_info[0] == 2 else self.page_objects_path)
            oprot.writeFieldEnd()
        if self.globals_path is not None:
            oprot.writeFieldBegin('globals_path', TType.STRING, 4)
            oprot.writeString(self.globals_path.encode('utf-8') if sys.version_info[0] == 2 else self.globals_path)
            oprot.writeFieldEnd()
        if self.globals is not None:
            oprot.writeFieldBegin('globals', TType.STRUCT, 5)
            self.globals.write(oprot)
            oprot.writeFieldEnd()
        if self.dotenv is not None:
            oprot.writeFieldBegin('dotenv', TType.STRUCT, 6)
            self.dotenv.write(oprot)
            oprot.writeFieldEnd()
        if self.persist_globals is not None:
            oprot.writeFieldBegin('persist_globals', TType.BOOL, 7)
            oprot.writeBool(self.persist_globals)
            oprot.writeFieldEnd()
        if self.output_folder is not None:
            oprot.writeFieldBegin('output_folder', TType.STRING, 8)
            oprot.writeString(self.output_folder.encode('utf-8') if sys.version_info[0] == 2 else self.output_folder)
            oprot.writeFieldEnd()
        if self.src_folders is not None:
            oprot.writeFieldBegin('src_folders', TType.STRING, 9)
            oprot.writeString(self.src_folders.encode('utf-8') if sys.version_info[0] == 2 else self.src_folders)
            oprot.writeFieldEnd()
        if self.live_output is not None:
            oprot.writeFieldBegin('live_output', TType.BOOL, 10)
            oprot.writeBool(self.live_output)
            oprot.writeFieldEnd()
        if self.disable_colors is not None:
            oprot.writeFieldBegin('disable_colors', TType.BOOL, 11)
            oprot.writeBool(self.disable_colors)
            oprot.writeFieldEnd()
        if self.parallel_process_delay is not None:
            oprot.writeFieldBegin('parallel_process_delay', TType.BYTE, 12)
            oprot.writeByte(self.parallel_process_delay)
            oprot.writeFieldEnd()
        if self.selenium is not None:
            oprot.writeFieldBegin('selenium', TType.STRUCT, 13)
            self.selenium.write(oprot)
            oprot.writeFieldEnd()
        if self.start_session is not None:
            oprot.writeFieldBegin('start_session', TType.BOOL, 14)
            oprot.writeBool(self.start_session)
            oprot.writeFieldEnd()
        if self.end_session_on_fail is not None:
            oprot.writeFieldBegin('end_session_on_fail', TType.BOOL, 15)
            oprot.writeBool(self.end_session_on_fail)
            oprot.writeFieldEnd()
        if self.test_workers is not None:
            oprot.writeFieldBegin('test_workers', TType.BOOL, 16)
            oprot.writeBool(self.test_workers)
            oprot.writeFieldEnd()
        if self.test_runner is not None:
            oprot.writeFieldBegin('test_runner', TType.STRING, 17)
            oprot.writeString(self.test_runner.encode('utf-8') if sys.version_info[0] == 2 else self.test_runner)
            oprot.writeFieldEnd()
        if self.webdriver is not None:
            oprot.writeFieldBegin('webdriver', TType.STRUCT, 18)
            self.webdriver.write(oprot)
            oprot.writeFieldEnd()
        if self.test_settings is not None:
            oprot.writeFieldBegin('test_settings', TType.STRUCT, 19)
            self.test_settings.write(oprot)
            oprot.writeFieldEnd()
        if self.launch_url is not None:
            oprot.writeFieldBegin('launch_url', TType.STRING, 20)
            oprot.writeString(self.launch_url.encode('utf-8') if sys.version_info[0] == 2 else self.launch_url)
            oprot.writeFieldEnd()
        if self.silent is not None:
            oprot.writeFieldBegin('silent', TType.BOOL, 21)
            oprot.writeBool(self.silent)
            oprot.writeFieldEnd()
        if self.output is not None:
            oprot.writeFieldBegin('output', TType.BOOL, 22)
            oprot.writeBool(self.output)
            oprot.writeFieldEnd()
        if self.detailed_output is not None:
            oprot.writeFieldBegin('detailed_output', TType.BOOL, 23)
            oprot.writeBool(self.detailed_output)
            oprot.writeFieldEnd()
        if self.output_timestamp is not None:
            oprot.writeFieldBegin('output_timestamp', TType.BOOL, 24)
            oprot.writeBool(self.output_timestamp)
            oprot.writeFieldEnd()
        if self.disable_error_log is not None:
            oprot.writeFieldBegin('disable_error_log', TType.BOOL, 25)
            oprot.writeBool(self.disable_error_log)
            oprot.writeFieldEnd()
        if self.screenshots is not None:
            oprot.writeFieldBegin('screenshots', TType.BOOL, 26)
            oprot.writeBool(self.screenshots)
            oprot.writeFieldEnd()
        if self.log_screenshot_data is not None:
            oprot.writeFieldBegin('log_screenshot_data', TType.BOOL, 27)
            oprot.writeBool(self.log_screenshot_data)
            oprot.writeFieldEnd()
        if self.desiredCapabilities is not None:
            oprot.writeFieldBegin('desiredCapabilities', TType.STRUCT, 28)
            self.desiredCapabilities.write(oprot)
            oprot.writeFieldEnd()
        if self.exclude is not None:
            oprot.writeFieldBegin('exclude', TType.STRING, 29)
            oprot.writeString(self.exclude.encode('utf-8') if sys.version_info[0] == 2 else self.exclude)
            oprot.writeFieldEnd()
        if self.filter is not None:
            oprot.writeFieldBegin('filter', TType.STRING, 30)
            oprot.writeString(self.filter.encode('utf-8') if sys.version_info[0] == 2 else self.filter)
            oprot.writeFieldEnd()
        if self.skipgroup is not None:
            oprot.writeFieldBegin('skipgroup', TType.STRING, 31)
            oprot.writeString(self.skipgroup.encode('utf-8') if sys.version_info[0] == 2 else self.skipgroup)
            oprot.writeFieldEnd()
        if self.sync_test_names is not None:
            oprot.writeFieldBegin('sync_test_names', TType.BOOL, 32)
            oprot.writeBool(self.sync_test_names)
            oprot.writeFieldEnd()
        if self.skiptags is not None:
            oprot.writeFieldBegin('skiptags', TType.STRING, 33)
            oprot.writeString(self.skiptags.encode('utf-8') if sys.version_info[0] == 2 else self.skiptags)
            oprot.writeFieldEnd()
        if self.use_xpath is not None:
            oprot.writeFieldBegin('use_xpath', TType.BOOL, 34)
            oprot.writeBool(self.use_xpath)
            oprot.writeFieldEnd()
        if self.parallel_mode is not None:
            oprot.writeFieldBegin('parallel_mode', TType.BOOL, 35)
            oprot.writeBool(self.parallel_mode)
            oprot.writeFieldEnd()
        if self.report_prefix is not None:
            oprot.writeFieldBegin('report_prefix', TType.STRING, 36)
            oprot.writeString(self.report_prefix.encode('utf-8') if sys.version_info[0] == 2 else self.report_prefix)
            oprot.writeFieldEnd()
        if self.unit_tests_mode is not None:
            oprot.writeFieldBegin('unit_tests_mode', TType.BOOL, 37)
            oprot.writeBool(self.unit_tests_mode)
            oprot.writeFieldEnd()
        if self.default_reporter is not None:
            oprot.writeFieldBegin('default_reporter', TType.STRING, 38)
            oprot.writeString(self.default_reporter.encode('utf-8') if sys.version_info[0] == 2 else self.default_reporter)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.globals is None:
            raise TProtocolException(message='Required field globals is unset!')
        if self.dotenv is None:
            raise TProtocolException(message='Required field dotenv is unset!')
        if self.persist_globals is None:
            raise TProtocolException(message='Required field persist_globals is unset!')
        if self.output_folder is None:
            raise TProtocolException(message='Required field output_folder is unset!')
        if self.live_output is None:
            raise TProtocolException(message='Required field live_output is unset!')
        if self.disable_colors is None:
            raise TProtocolException(message='Required field disable_colors is unset!')
        if self.parallel_process_delay is None:
            raise TProtocolException(message='Required field parallel_process_delay is unset!')
        if self.selenium is None:
            raise TProtocolException(message='Required field selenium is unset!')
        if self.start_session is None:
            raise TProtocolException(message='Required field start_session is unset!')
        if self.end_session_on_fail is None:
            raise TProtocolException(message='Required field end_session_on_fail is unset!')
        if self.test_workers is None:
            raise TProtocolException(message='Required field test_workers is unset!')
        if self.test_runner is None:
            raise TProtocolException(message='Required field test_runner is unset!')
        if self.webdriver is None:
            raise TProtocolException(message='Required field webdriver is unset!')
        if self.test_settings is None:
            raise TProtocolException(message='Required field test_settings is unset!')
        if self.launch_url is None:
            raise TProtocolException(message='Required field launch_url is unset!')
        if self.silent is None:
            raise TProtocolException(message='Required field silent is unset!')
        if self.output is None:
            raise TProtocolException(message='Required field output is unset!')
        if self.detailed_output is None:
            raise TProtocolException(message='Required field detailed_output is unset!')
        if self.output_timestamp is None:
            raise TProtocolException(message='Required field output_timestamp is unset!')
        if self.disable_error_log is None:
            raise TProtocolException(message='Required field disable_error_log is unset!')
        if self.screenshots is None:
            raise TProtocolException(message='Required field screenshots is unset!')
        if self.log_screenshot_data is None:
            raise TProtocolException(message='Required field log_screenshot_data is unset!')
        if self.desiredCapabilities is None:
            raise TProtocolException(message='Required field desiredCapabilities is unset!')
        if self.skipgroup is None:
            raise TProtocolException(message='Required field skipgroup is unset!')
        if self.sync_test_names is None:
            raise TProtocolException(message='Required field sync_test_names is unset!')
        if self.skiptags is None:
            raise TProtocolException(message='Required field skiptags is unset!')
        if self.use_xpath is None:
            raise TProtocolException(message='Required field use_xpath is unset!')
        if self.parallel_mode is None:
            raise TProtocolException(message='Required field parallel_mode is unset!')
        if self.report_prefix is None:
            raise TProtocolException(message='Required field report_prefix is unset!')
        if self.unit_tests_mode is None:
            raise TProtocolException(message='Required field unit_tests_mode is unset!')
        if self.default_reporter is None:
            raise TProtocolException(message='Required field default_reporter is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(Globals)
Globals.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'abortOnAssertionFailure', None, None, ),  # 1
    (2, TType.BOOL, 'abortOnElementLocateError', None, None, ),  # 2
    (3, TType.I16, 'waitForConditionPollInterval', None, None, ),  # 3
    (4, TType.I16, 'waitForConditionTimeout', None, None, ),  # 4
    (5, TType.BOOL, 'throwOnMultipleElementsReturned', None, None, ),  # 5
    (6, TType.BOOL, 'suppressWarningsOnMultipleElementsReturned', None, None, ),  # 6
    (7, TType.I16, 'asyncHookTimeout', None, None, ),  # 7
    (8, TType.I16, 'unitTestsTimeout', None, None, ),  # 8
    (9, TType.I16, 'customReporterCallbackTimeout', None, None, ),  # 9
    (10, TType.I16, 'retryAssertionTimeout', None, None, ),  # 10
)
all_structs.append(Empty)
Empty.thrift_spec = (
)
all_structs.append(Selenium)
Selenium.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'start_process', None, None, ),  # 1
    (2, TType.STRUCT, 'cli_args', [Empty, None], None, ),  # 2
    (3, TType.STRING, 'server_path', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'log_path', 'UTF8', None, ),  # 4
    (5, TType.I16, 'check_process_delay', None, None, ),  # 5
    (6, TType.BYTE, 'max_status_poll_tries', None, None, ),  # 6
    (7, TType.I16, 'status_poll_interval', None, None, ),  # 7
)
all_structs.append(WebDriver)
WebDriver.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'start_process', None, None, ),  # 1
    (2, TType.STRUCT, 'cli_args', [Empty, None], None, ),  # 2
    (3, TType.STRING, 'server_path', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'log_path', 'UTF8', None, ),  # 4
    (5, TType.BYTE, 'check_process_delay', None, None, ),  # 5
    (6, TType.BYTE, 'max_status_poll_tries', None, None, ),  # 6
    (7, TType.I16, 'status_poll_interval', None, None, ),  # 7
    (8, TType.I32, 'process_create_timeout', None, None, ),  # 8
    (9, TType.STRUCT, 'timeout_options', [Empty, None], None, ),  # 9
)
all_structs.append(DesiredCapabilities)
DesiredCapabilities.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'browserName', 'UTF8', None, ),  # 1
)
all_structs.append(Main)
Main.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'custom_commands_path', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'custom_assertions_path', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'page_objects_path', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'globals_path', 'UTF8', None, ),  # 4
    (5, TType.STRUCT, 'globals', [Globals, None], None, ),  # 5
    (6, TType.STRUCT, 'dotenv', [Empty, None], None, ),  # 6
    (7, TType.BOOL, 'persist_globals', None, None, ),  # 7
    (8, TType.STRING, 'output_folder', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'src_folders', 'UTF8', None, ),  # 9
    (10, TType.BOOL, 'live_output', None, None, ),  # 10
    (11, TType.BOOL, 'disable_colors', None, None, ),  # 11
    (12, TType.BYTE, 'parallel_process_delay', None, None, ),  # 12
    (13, TType.STRUCT, 'selenium', [Selenium, None], None, ),  # 13
    (14, TType.BOOL, 'start_session', None, None, ),  # 14
    (15, TType.BOOL, 'end_session_on_fail', None, None, ),  # 15
    (16, TType.BOOL, 'test_workers', None, None, ),  # 16
    (17, TType.STRING, 'test_runner', 'UTF8', None, ),  # 17
    (18, TType.STRUCT, 'webdriver', [WebDriver, None], None, ),  # 18
    (19, TType.STRUCT, 'test_settings', [Empty, None], None, ),  # 19
    (20, TType.STRING, 'launch_url', 'UTF8', None, ),  # 20
    (21, TType.BOOL, 'silent', None, None, ),  # 21
    (22, TType.BOOL, 'output', None, None, ),  # 22
    (23, TType.BOOL, 'detailed_output', None, None, ),  # 23
    (24, TType.BOOL, 'output_timestamp', None, None, ),  # 24
    (25, TType.BOOL, 'disable_error_log', None, None, ),  # 25
    (26, TType.BOOL, 'screenshots', None, None, ),  # 26
    (27, TType.BOOL, 'log_screenshot_data', None, None, ),  # 27
    (28, TType.STRUCT, 'desiredCapabilities', [DesiredCapabilities, None], None, ),  # 28
    (29, TType.STRING, 'exclude', 'UTF8', None, ),  # 29
    (30, TType.STRING, 'filter', 'UTF8', None, ),  # 30
    (31, TType.STRING, 'skipgroup', 'UTF8', None, ),  # 31
    (32, TType.BOOL, 'sync_test_names', None, None, ),  # 32
    (33, TType.STRING, 'skiptags', 'UTF8', None, ),  # 33
    (34, TType.BOOL, 'use_xpath', None, None, ),  # 34
    (35, TType.BOOL, 'parallel_mode', None, None, ),  # 35
    (36, TType.STRING, 'report_prefix', 'UTF8', None, ),  # 36
    (37, TType.BOOL, 'unit_tests_mode', None, None, ),  # 37
    (38, TType.STRING, 'default_reporter', 'UTF8', None, ),  # 38
)
fix_spec(all_structs)
del all_structs
